// Code generated by protoc-gen-go. DO NOT EDIT.
// source: project.proto

/*
Package project is a generated protocol buffer package.

It is generated from these files:
	project.proto

It has these top-level messages:
	CreateRequest
	RetrieveRequest
	ProjectResponse
	AddMemberRequest
	RemoveMemberRequest
	InviteRequest
	InviteStatusResponse
	ActionInviteRequest
	MemberStatusResponse
	GetMembersRequest
	GetProjectsRequest
	GetInvitesRequest
	InvitesResponse
	InviteResponse
	MembersResponse
	ProjectsResponse
	ProjectExistsResponse
*/
package project

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Mode int32

const (
	Mode_SANDBOX    Mode = 0
	Mode_PRODUCTION Mode = 1
	Mode_RESERVED   Mode = 2
)

var Mode_name = map[int32]string{
	0: "SANDBOX",
	1: "PRODUCTION",
	2: "RESERVED",
}
var Mode_value = map[string]int32{
	"SANDBOX":    0,
	"PRODUCTION": 1,
	"RESERVED":   2,
}

func (x Mode) String() string {
	return proto.EnumName(Mode_name, int32(x))
}
func (Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Region int32

const (
	Region_GLOBAL Region = 0
	Region_US     Region = 1
	Region_EUROPE Region = 2
	Region_ASIA   Region = 3
)

var Region_name = map[int32]string{
	0: "GLOBAL",
	1: "US",
	2: "EUROPE",
	3: "ASIA",
}
var Region_value = map[string]int32{
	"GLOBAL": 0,
	"US":     1,
	"EUROPE": 2,
	"ASIA":   3,
}

func (x Region) String() string {
	return proto.EnumName(Region_name, int32(x))
}
func (Region) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MemberType int32

const (
	MemberType_OWNER   MemberType = 0
	MemberType_MEMBER  MemberType = 1
	MemberType_VIEWER  MemberType = 2
	MemberType_SUPPORT MemberType = 3
)

var MemberType_name = map[int32]string{
	0: "OWNER",
	1: "MEMBER",
	2: "VIEWER",
	3: "SUPPORT",
}
var MemberType_value = map[string]int32{
	"OWNER":   0,
	"MEMBER":  1,
	"VIEWER":  2,
	"SUPPORT": 3,
}

func (x MemberType) String() string {
	return proto.EnumName(MemberType_name, int32(x))
}
func (MemberType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type InviteStatus int32

const (
	InviteStatus_PENDING   InviteStatus = 0
	InviteStatus_ACCEPTED  InviteStatus = 1
	InviteStatus_REJECTED  InviteStatus = 2
	InviteStatus_EXPIRED   InviteStatus = 3
	InviteStatus_NOT_FOUND InviteStatus = 4
)

var InviteStatus_name = map[int32]string{
	0: "PENDING",
	1: "ACCEPTED",
	2: "REJECTED",
	3: "EXPIRED",
	4: "NOT_FOUND",
}
var InviteStatus_value = map[string]int32{
	"PENDING":   0,
	"ACCEPTED":  1,
	"REJECTED":  2,
	"EXPIRED":   3,
	"NOT_FOUND": 4,
}

func (x InviteStatus) String() string {
	return proto.EnumName(InviteStatus_name, int32(x))
}
func (InviteStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CreateRequest struct {
	Id            string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name          string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DistributorId string            `protobuf:"bytes,3,opt,name=distributor_id,json=distributorId" json:"distributor_id,omitempty"`
	Mode          Mode              `protobuf:"varint,4,opt,name=mode,enum=project.Mode" json:"mode,omitempty"`
	Region        Region            `protobuf:"varint,5,opt,name=region,enum=project.Region" json:"region,omitempty"`
	Meta          map[string]string `protobuf:"bytes,6,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRequest) GetDistributorId() string {
	if m != nil {
		return m.DistributorId
	}
	return ""
}

func (m *CreateRequest) GetMode() Mode {
	if m != nil {
		return m.Mode
	}
	return Mode_SANDBOX
}

func (m *CreateRequest) GetRegion() Region {
	if m != nil {
		return m.Region
	}
	return Region_GLOBAL
}

func (m *CreateRequest) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

type RetrieveRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RetrieveRequest) Reset()                    { *m = RetrieveRequest{} }
func (m *RetrieveRequest) String() string            { return proto.CompactTextString(m) }
func (*RetrieveRequest) ProtoMessage()               {}
func (*RetrieveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RetrieveRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ProjectResponse struct {
	Id            string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name          string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DistributorId string                     `protobuf:"bytes,3,opt,name=distributor_id,json=distributorId" json:"distributor_id,omitempty"`
	Mode          Mode                       `protobuf:"varint,4,opt,name=mode,enum=project.Mode" json:"mode,omitempty"`
	Region        Region                     `protobuf:"varint,5,opt,name=region,enum=project.Region" json:"region,omitempty"`
	Created       *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=created" json:"created,omitempty"`
}

func (m *ProjectResponse) Reset()                    { *m = ProjectResponse{} }
func (m *ProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*ProjectResponse) ProtoMessage()               {}
func (*ProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProjectResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProjectResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProjectResponse) GetDistributorId() string {
	if m != nil {
		return m.DistributorId
	}
	return ""
}

func (m *ProjectResponse) GetMode() Mode {
	if m != nil {
		return m.Mode
	}
	return Mode_SANDBOX
}

func (m *ProjectResponse) GetRegion() Region {
	if m != nil {
		return m.Region
	}
	return Region_GLOBAL
}

func (m *ProjectResponse) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

type AddMemberRequest struct {
	MemberId  string                     `protobuf:"bytes,1,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	ProjectId string                     `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Type      MemberType                 `protobuf:"varint,3,opt,name=type,enum=project.MemberType" json:"type,omitempty"`
	Expiry    *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=expiry" json:"expiry,omitempty"`
}

func (m *AddMemberRequest) Reset()                    { *m = AddMemberRequest{} }
func (m *AddMemberRequest) String() string            { return proto.CompactTextString(m) }
func (*AddMemberRequest) ProtoMessage()               {}
func (*AddMemberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddMemberRequest) GetMemberId() string {
	if m != nil {
		return m.MemberId
	}
	return ""
}

func (m *AddMemberRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *AddMemberRequest) GetType() MemberType {
	if m != nil {
		return m.Type
	}
	return MemberType_OWNER
}

func (m *AddMemberRequest) GetExpiry() *google_protobuf.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

type RemoveMemberRequest struct {
	MemberId  string `protobuf:"bytes,1,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (m *RemoveMemberRequest) Reset()                    { *m = RemoveMemberRequest{} }
func (m *RemoveMemberRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveMemberRequest) ProtoMessage()               {}
func (*RemoveMemberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RemoveMemberRequest) GetMemberId() string {
	if m != nil {
		return m.MemberId
	}
	return ""
}

func (m *RemoveMemberRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

type InviteRequest struct {
	Email     string                     `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	ProjectId string                     `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Type      MemberType                 `protobuf:"varint,3,opt,name=type,enum=project.MemberType" json:"type,omitempty"`
	Expiry    *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=expiry" json:"expiry,omitempty"`
}

func (m *InviteRequest) Reset()                    { *m = InviteRequest{} }
func (m *InviteRequest) String() string            { return proto.CompactTextString(m) }
func (*InviteRequest) ProtoMessage()               {}
func (*InviteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InviteRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *InviteRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *InviteRequest) GetType() MemberType {
	if m != nil {
		return m.Type
	}
	return MemberType_OWNER
}

func (m *InviteRequest) GetExpiry() *google_protobuf.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

type InviteStatusResponse struct {
	Email        string                     `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Status       InviteStatus               `protobuf:"varint,2,opt,name=status,enum=project.InviteStatus" json:"status,omitempty"`
	Verification string                     `protobuf:"bytes,3,opt,name=verification" json:"verification,omitempty"`
	Created      *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	Actioned     *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=actioned" json:"actioned,omitempty"`
}

func (m *InviteStatusResponse) Reset()                    { *m = InviteStatusResponse{} }
func (m *InviteStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*InviteStatusResponse) ProtoMessage()               {}
func (*InviteStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InviteStatusResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *InviteStatusResponse) GetStatus() InviteStatus {
	if m != nil {
		return m.Status
	}
	return InviteStatus_PENDING
}

func (m *InviteStatusResponse) GetVerification() string {
	if m != nil {
		return m.Verification
	}
	return ""
}

func (m *InviteStatusResponse) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *InviteStatusResponse) GetActioned() *google_protobuf.Timestamp {
	if m != nil {
		return m.Actioned
	}
	return nil
}

type ActionInviteRequest struct {
	Email        string       `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	ProjectId    string       `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	MemberId     string       `protobuf:"bytes,3,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	Status       InviteStatus `protobuf:"varint,4,opt,name=status,enum=project.InviteStatus" json:"status,omitempty"`
	Verification string       `protobuf:"bytes,5,opt,name=verification" json:"verification,omitempty"`
}

func (m *ActionInviteRequest) Reset()                    { *m = ActionInviteRequest{} }
func (m *ActionInviteRequest) String() string            { return proto.CompactTextString(m) }
func (*ActionInviteRequest) ProtoMessage()               {}
func (*ActionInviteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ActionInviteRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ActionInviteRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ActionInviteRequest) GetMemberId() string {
	if m != nil {
		return m.MemberId
	}
	return ""
}

func (m *ActionInviteRequest) GetStatus() InviteStatus {
	if m != nil {
		return m.Status
	}
	return InviteStatus_PENDING
}

func (m *ActionInviteRequest) GetVerification() string {
	if m != nil {
		return m.Verification
	}
	return ""
}

type MemberStatusResponse struct {
	MemberId  string                     `protobuf:"bytes,1,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	ProjectId string                     `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Type      MemberType                 `protobuf:"varint,3,opt,name=type,enum=project.MemberType" json:"type,omitempty"`
	Invited   *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=invited" json:"invited,omitempty"`
	Expiry    *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=expiry" json:"expiry,omitempty"`
	Joined    *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=joined" json:"joined,omitempty"`
	Detached  *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=detached" json:"detached,omitempty"`
}

func (m *MemberStatusResponse) Reset()                    { *m = MemberStatusResponse{} }
func (m *MemberStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*MemberStatusResponse) ProtoMessage()               {}
func (*MemberStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MemberStatusResponse) GetMemberId() string {
	if m != nil {
		return m.MemberId
	}
	return ""
}

func (m *MemberStatusResponse) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *MemberStatusResponse) GetType() MemberType {
	if m != nil {
		return m.Type
	}
	return MemberType_OWNER
}

func (m *MemberStatusResponse) GetInvited() *google_protobuf.Timestamp {
	if m != nil {
		return m.Invited
	}
	return nil
}

func (m *MemberStatusResponse) GetExpiry() *google_protobuf.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *MemberStatusResponse) GetJoined() *google_protobuf.Timestamp {
	if m != nil {
		return m.Joined
	}
	return nil
}

func (m *MemberStatusResponse) GetDetached() *google_protobuf.Timestamp {
	if m != nil {
		return m.Detached
	}
	return nil
}

type GetMembersRequest struct {
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (m *GetMembersRequest) Reset()                    { *m = GetMembersRequest{} }
func (m *GetMembersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMembersRequest) ProtoMessage()               {}
func (*GetMembersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetMembersRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

type GetProjectsRequest struct {
	MemberId string `protobuf:"bytes,1,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
}

func (m *GetProjectsRequest) Reset()                    { *m = GetProjectsRequest{} }
func (m *GetProjectsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProjectsRequest) ProtoMessage()               {}
func (*GetProjectsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetProjectsRequest) GetMemberId() string {
	if m != nil {
		return m.MemberId
	}
	return ""
}

type GetInvitesRequest struct {
	MemberId string `protobuf:"bytes,1,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
}

func (m *GetInvitesRequest) Reset()                    { *m = GetInvitesRequest{} }
func (m *GetInvitesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetInvitesRequest) ProtoMessage()               {}
func (*GetInvitesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetInvitesRequest) GetMemberId() string {
	if m != nil {
		return m.MemberId
	}
	return ""
}

type InvitesResponse struct {
	Invites []*InviteResponse `protobuf:"bytes,1,rep,name=invites" json:"invites,omitempty"`
}

func (m *InvitesResponse) Reset()                    { *m = InvitesResponse{} }
func (m *InvitesResponse) String() string            { return proto.CompactTextString(m) }
func (*InvitesResponse) ProtoMessage()               {}
func (*InvitesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *InvitesResponse) GetInvites() []*InviteResponse {
	if m != nil {
		return m.Invites
	}
	return nil
}

type InviteResponse struct {
	Project *ProjectResponse      `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	Status  *InviteStatusResponse `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *InviteResponse) Reset()                    { *m = InviteResponse{} }
func (m *InviteResponse) String() string            { return proto.CompactTextString(m) }
func (*InviteResponse) ProtoMessage()               {}
func (*InviteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *InviteResponse) GetProject() *ProjectResponse {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *InviteResponse) GetStatus() *InviteStatusResponse {
	if m != nil {
		return m.Status
	}
	return nil
}

type MembersResponse struct {
	Members map[string]*MemberStatusResponse `protobuf:"bytes,1,rep,name=members" json:"members,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MembersResponse) Reset()                    { *m = MembersResponse{} }
func (m *MembersResponse) String() string            { return proto.CompactTextString(m) }
func (*MembersResponse) ProtoMessage()               {}
func (*MembersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *MembersResponse) GetMembers() map[string]*MemberStatusResponse {
	if m != nil {
		return m.Members
	}
	return nil
}

type ProjectsResponse struct {
	Projects map[string]*ProjectResponse `protobuf:"bytes,1,rep,name=projects" json:"projects,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ProjectsResponse) Reset()                    { *m = ProjectsResponse{} }
func (m *ProjectsResponse) String() string            { return proto.CompactTextString(m) }
func (*ProjectsResponse) ProtoMessage()               {}
func (*ProjectsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ProjectsResponse) GetProjects() map[string]*ProjectResponse {
	if m != nil {
		return m.Projects
	}
	return nil
}

type ProjectExistsResponse struct {
	Exists      bool     `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	Suggestions []string `protobuf:"bytes,2,rep,name=suggestions" json:"suggestions,omitempty"`
}

func (m *ProjectExistsResponse) Reset()                    { *m = ProjectExistsResponse{} }
func (m *ProjectExistsResponse) String() string            { return proto.CompactTextString(m) }
func (*ProjectExistsResponse) ProtoMessage()               {}
func (*ProjectExistsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ProjectExistsResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *ProjectExistsResponse) GetSuggestions() []string {
	if m != nil {
		return m.Suggestions
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "project.CreateRequest")
	proto.RegisterType((*RetrieveRequest)(nil), "project.RetrieveRequest")
	proto.RegisterType((*ProjectResponse)(nil), "project.ProjectResponse")
	proto.RegisterType((*AddMemberRequest)(nil), "project.AddMemberRequest")
	proto.RegisterType((*RemoveMemberRequest)(nil), "project.RemoveMemberRequest")
	proto.RegisterType((*InviteRequest)(nil), "project.InviteRequest")
	proto.RegisterType((*InviteStatusResponse)(nil), "project.InviteStatusResponse")
	proto.RegisterType((*ActionInviteRequest)(nil), "project.ActionInviteRequest")
	proto.RegisterType((*MemberStatusResponse)(nil), "project.MemberStatusResponse")
	proto.RegisterType((*GetMembersRequest)(nil), "project.GetMembersRequest")
	proto.RegisterType((*GetProjectsRequest)(nil), "project.GetProjectsRequest")
	proto.RegisterType((*GetInvitesRequest)(nil), "project.GetInvitesRequest")
	proto.RegisterType((*InvitesResponse)(nil), "project.InvitesResponse")
	proto.RegisterType((*InviteResponse)(nil), "project.InviteResponse")
	proto.RegisterType((*MembersResponse)(nil), "project.MembersResponse")
	proto.RegisterType((*ProjectsResponse)(nil), "project.ProjectsResponse")
	proto.RegisterType((*ProjectExistsResponse)(nil), "project.ProjectExistsResponse")
	proto.RegisterEnum("project.Mode", Mode_name, Mode_value)
	proto.RegisterEnum("project.Region", Region_name, Region_value)
	proto.RegisterEnum("project.MemberType", MemberType_name, MemberType_value)
	proto.RegisterEnum("project.InviteStatus", InviteStatus_name, InviteStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Projects service

type ProjectsClient interface {
	Exists(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*ProjectExistsResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	GetProjects(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*ProjectsResponse, error)
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*MemberStatusResponse, error)
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*MemberStatusResponse, error)
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*MembersResponse, error)
	GetInvites(ctx context.Context, in *GetInvitesRequest, opts ...grpc.CallOption) (*InvitesResponse, error)
	Invite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*InviteStatusResponse, error)
	ActionInvite(ctx context.Context, in *ActionInviteRequest, opts ...grpc.CallOption) (*MemberStatusResponse, error)
}

type projectsClient struct {
	cc *grpc.ClientConn
}

func NewProjectsClient(cc *grpc.ClientConn) ProjectsClient {
	return &projectsClient{cc}
}

func (c *projectsClient) Exists(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*ProjectExistsResponse, error) {
	out := new(ProjectExistsResponse)
	err := grpc.Invoke(ctx, "/project.Projects/Exists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	out := new(ProjectResponse)
	err := grpc.Invoke(ctx, "/project.Projects/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	out := new(ProjectResponse)
	err := grpc.Invoke(ctx, "/project.Projects/Retrieve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) GetProjects(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*ProjectsResponse, error) {
	out := new(ProjectsResponse)
	err := grpc.Invoke(ctx, "/project.Projects/GetProjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*MemberStatusResponse, error) {
	out := new(MemberStatusResponse)
	err := grpc.Invoke(ctx, "/project.Projects/AddMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*MemberStatusResponse, error) {
	out := new(MemberStatusResponse)
	err := grpc.Invoke(ctx, "/project.Projects/RemoveMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*MembersResponse, error) {
	out := new(MembersResponse)
	err := grpc.Invoke(ctx, "/project.Projects/GetMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) GetInvites(ctx context.Context, in *GetInvitesRequest, opts ...grpc.CallOption) (*InvitesResponse, error) {
	out := new(InvitesResponse)
	err := grpc.Invoke(ctx, "/project.Projects/GetInvites", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) Invite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*InviteStatusResponse, error) {
	out := new(InviteStatusResponse)
	err := grpc.Invoke(ctx, "/project.Projects/Invite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) ActionInvite(ctx context.Context, in *ActionInviteRequest, opts ...grpc.CallOption) (*MemberStatusResponse, error) {
	out := new(MemberStatusResponse)
	err := grpc.Invoke(ctx, "/project.Projects/ActionInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Projects service

type ProjectsServer interface {
	Exists(context.Context, *RetrieveRequest) (*ProjectExistsResponse, error)
	Create(context.Context, *CreateRequest) (*ProjectResponse, error)
	Retrieve(context.Context, *RetrieveRequest) (*ProjectResponse, error)
	GetProjects(context.Context, *GetProjectsRequest) (*ProjectsResponse, error)
	AddMember(context.Context, *AddMemberRequest) (*MemberStatusResponse, error)
	RemoveMember(context.Context, *RemoveMemberRequest) (*MemberStatusResponse, error)
	GetMembers(context.Context, *GetMembersRequest) (*MembersResponse, error)
	GetInvites(context.Context, *GetInvitesRequest) (*InvitesResponse, error)
	Invite(context.Context, *InviteRequest) (*InviteStatusResponse, error)
	ActionInvite(context.Context, *ActionInviteRequest) (*MemberStatusResponse, error)
}

func RegisterProjectsServer(s *grpc.Server, srv ProjectsServer) {
	s.RegisterService(&_Projects_serviceDesc, srv)
}

func _Projects_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Projects/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).Exists(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Projects/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Projects/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).Retrieve(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Projects/GetProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).GetProjects(ctx, req.(*GetProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Projects/AddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).AddMember(ctx, req.(*AddMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Projects/RemoveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).RemoveMember(ctx, req.(*RemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Projects/GetMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_GetInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).GetInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Projects/GetInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).GetInvites(ctx, req.(*GetInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Projects/Invite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).Invite(ctx, req.(*InviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_ActionInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).ActionInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Projects/ActionInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).ActionInvite(ctx, req.(*ActionInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Projects_serviceDesc = grpc.ServiceDesc{
	ServiceName: "project.Projects",
	HandlerType: (*ProjectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exists",
			Handler:    _Projects_Exists_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Projects_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Projects_Retrieve_Handler,
		},
		{
			MethodName: "GetProjects",
			Handler:    _Projects_GetProjects_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _Projects_AddMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _Projects_RemoveMember_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _Projects_GetMembers_Handler,
		},
		{
			MethodName: "GetInvites",
			Handler:    _Projects_GetInvites_Handler,
		},
		{
			MethodName: "Invite",
			Handler:    _Projects_Invite_Handler,
		},
		{
			MethodName: "ActionInvite",
			Handler:    _Projects_ActionInvite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project.proto",
}

func init() { proto.RegisterFile("project.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0x8e, 0xfc, 0x23, 0xdb, 0xc7, 0xb1, 0x23, 0x36, 0x69, 0x11, 0x2a, 0x05, 0x47, 0x4c, 0x27,
	0x99, 0xcc, 0xd4, 0x21, 0x6a, 0xf9, 0x99, 0x0e, 0x43, 0xc7, 0x3f, 0x22, 0x63, 0x68, 0x6c, 0x77,
	0x6d, 0xb7, 0x85, 0x9b, 0x8c, 0x6c, 0x6d, 0x5d, 0xb5, 0xb1, 0x65, 0x24, 0x39, 0x93, 0x0c, 0xcf,
	0xc1, 0x03, 0x70, 0xcd, 0xc0, 0x03, 0xc0, 0x53, 0xf0, 0x02, 0xbc, 0x01, 0xef, 0xc0, 0x68, 0x57,
	0x2b, 0x4b, 0x8a, 0xe3, 0x78, 0x98, 0x0e, 0x70, 0xe7, 0x3d, 0xfb, 0x9d, 0xd5, 0x77, 0xce, 0xf9,
	0xf6, 0xec, 0x31, 0x94, 0x66, 0x8e, 0xfd, 0x9a, 0x8c, 0xbc, 0xea, 0xcc, 0xb1, 0x3d, 0x1b, 0xe5,
	0x82, 0xa5, 0xf2, 0xe1, 0xd8, 0xb6, 0xc7, 0x67, 0xe4, 0x90, 0x9a, 0x87, 0xf3, 0x97, 0x87, 0x9e,
	0x35, 0x21, 0xae, 0x67, 0x4c, 0x66, 0x0c, 0xa9, 0xfe, 0x98, 0x82, 0x52, 0xc3, 0x21, 0x86, 0x47,
	0x30, 0xf9, 0x7e, 0x4e, 0x5c, 0x0f, 0x95, 0x21, 0x65, 0x99, 0xb2, 0x50, 0x11, 0xf6, 0x0b, 0x38,
	0x65, 0x99, 0x08, 0x41, 0x66, 0x6a, 0x4c, 0x88, 0x9c, 0xa2, 0x16, 0xfa, 0x1b, 0xdd, 0x83, 0xb2,
	0x69, 0xb9, 0x9e, 0x63, 0x0d, 0xe7, 0x9e, 0xed, 0x9c, 0x5a, 0xa6, 0x9c, 0xa6, 0xbb, 0xa5, 0x88,
	0xb5, 0x65, 0xa2, 0x5d, 0xc8, 0x4c, 0x6c, 0x93, 0xc8, 0x99, 0x8a, 0xb0, 0x5f, 0xd6, 0x4a, 0x55,
	0x4e, 0xf2, 0xc4, 0x36, 0x09, 0xa6, 0x5b, 0x68, 0x0f, 0x44, 0x87, 0x8c, 0x2d, 0x7b, 0x2a, 0x67,
	0x29, 0x68, 0x2b, 0x04, 0x61, 0x6a, 0xc6, 0xc1, 0x36, 0x7a, 0x08, 0x99, 0x09, 0xf1, 0x0c, 0x59,
	0xac, 0xa4, 0xf7, 0x8b, 0x5a, 0x25, 0x84, 0xc5, 0xc8, 0x57, 0x4f, 0x88, 0x67, 0xe8, 0x53, 0xcf,
	0xb9, 0xc4, 0x14, 0xad, 0x7c, 0x06, 0x85, 0xd0, 0x84, 0x24, 0x48, 0xbf, 0x21, 0x97, 0x41, 0x68,
	0xfe, 0x4f, 0xb4, 0x03, 0xd9, 0x73, 0xe3, 0x6c, 0xce, 0x83, 0x63, 0x8b, 0x47, 0xa9, 0xcf, 0x05,
	0x75, 0x17, 0xb6, 0x30, 0xf1, 0x1c, 0x8b, 0x9c, 0x5f, 0x97, 0x18, 0xf5, 0x4f, 0x01, 0xb6, 0xba,
	0x8c, 0x05, 0x26, 0xee, 0xcc, 0x9e, 0xba, 0xe4, 0xff, 0x9b, 0xbc, 0xdc, 0x88, 0xe6, 0xc9, 0x94,
	0xc5, 0x8a, 0xb0, 0x5f, 0xd4, 0x94, 0x2a, 0x13, 0x46, 0x95, 0x0b, 0xa3, 0xda, 0xe7, 0xc2, 0xc0,
	0x1c, 0xaa, 0xfe, 0x2c, 0x80, 0x54, 0x33, 0xcd, 0x13, 0x32, 0x19, 0x12, 0x87, 0x67, 0xe1, 0x0e,
	0x14, 0x26, 0xd4, 0x70, 0x1a, 0x06, 0x9a, 0x67, 0x86, 0x96, 0x89, 0xee, 0x02, 0x04, 0x0c, 0xfc,
	0x5d, 0x16, 0x74, 0x21, 0xb0, 0xb4, 0x4c, 0xb4, 0x07, 0x19, 0xef, 0x72, 0x46, 0x68, 0xbc, 0x65,
	0x6d, 0x7b, 0x11, 0x12, 0xf5, 0xef, 0x5f, 0xce, 0x08, 0xa6, 0x00, 0xa4, 0x81, 0x48, 0x2e, 0x66,
	0x96, 0x73, 0x49, 0xa3, 0x5f, 0x4d, 0x37, 0x40, 0xaa, 0x4f, 0x61, 0x1b, 0x93, 0x89, 0x7d, 0x4e,
	0xde, 0x1a, 0x5f, 0xf5, 0x27, 0x01, 0x4a, 0xad, 0xe9, 0xb9, 0xb5, 0xb8, 0x1c, 0x3b, 0x90, 0x25,
	0x13, 0xc3, 0x3a, 0x0b, 0x4e, 0x62, 0x8b, 0xff, 0x34, 0xec, 0xbf, 0x04, 0xd8, 0x61, 0x1c, 0x7b,
	0x9e, 0xe1, 0xcd, 0xdd, 0x50, 0x8a, 0xcb, 0xa9, 0xde, 0x07, 0xd1, 0xa5, 0x38, 0x4a, 0xb3, 0xac,
	0xdd, 0x0a, 0xd9, 0xc4, 0x0e, 0x09, 0x40, 0x48, 0x85, 0xcd, 0x73, 0xe2, 0x58, 0x2f, 0xad, 0x91,
	0xe1, 0xf9, 0x3a, 0x63, 0x4a, 0x8d, 0xd9, 0xa2, 0xe2, 0xca, 0xac, 0x2d, 0x2e, 0xf4, 0x29, 0xe4,
	0x8d, 0x91, 0xef, 0x4f, 0x4c, 0xaa, 0xde, 0xd5, 0x6e, 0x21, 0x56, 0xfd, 0x4d, 0x80, 0xed, 0x1a,
	0x5d, 0xbc, 0x85, 0xca, 0xc4, 0xc4, 0x91, 0x4e, 0x88, 0x63, 0x91, 0xaa, 0xcc, 0x3f, 0x49, 0x55,
	0xf6, 0x6a, 0xaa, 0xd4, 0x3f, 0x52, 0xb0, 0xc3, 0xaa, 0x9e, 0x28, 0xd6, 0xbf, 0x72, 0xab, 0x1e,
	0x42, 0xce, 0xa2, 0xcc, 0xd7, 0x2a, 0x54, 0x00, 0x8d, 0x88, 0x32, 0xbb, 0xae, 0x28, 0x7d, 0x9f,
	0xd7, 0xb6, 0x35, 0x5d, 0xab, 0xdd, 0x04, 0x48, 0x5f, 0x10, 0x26, 0xf1, 0x8c, 0xd1, 0x2b, 0x62,
	0xca, 0xb9, 0x9b, 0x05, 0xc1, 0xb1, 0xaa, 0x06, 0xef, 0x1c, 0x13, 0x8f, 0x05, 0xeb, 0x72, 0x35,
	0xc4, 0x53, 0x26, 0x24, 0x2f, 0xf6, 0x11, 0xa0, 0x63, 0xe2, 0x05, 0xcd, 0xdb, 0x5d, 0xa7, 0x55,
	0xa8, 0x1f, 0xd3, 0xcf, 0xb0, 0xca, 0xaf, 0xe7, 0xd1, 0x84, 0xad, 0x10, 0x1e, 0x94, 0xf9, 0x88,
	0x57, 0xc0, 0x95, 0x05, 0xfa, 0x8e, 0xbd, 0x9b, 0xd0, 0x14, 0x47, 0xf2, 0xf4, 0xbb, 0xea, 0x0f,
	0x50, 0x8e, 0x6f, 0x21, 0x0d, 0xf8, 0xf3, 0x4e, 0x3f, 0x59, 0xd4, 0xe4, 0xf0, 0x90, 0xc4, 0x73,
	0x84, 0x39, 0x10, 0x7d, 0x12, 0xbb, 0xf6, 0x45, 0xed, 0xee, 0x72, 0x2d, 0x73, 0xbf, 0x00, 0xac,
	0xfe, 0x22, 0xc0, 0x56, 0x98, 0xd9, 0xe0, 0xf3, 0x8f, 0x21, 0xc7, 0x42, 0xe4, 0x31, 0xdc, 0x4b,
	0x28, 0x2e, 0x84, 0xf2, 0x35, 0x7b, 0x90, 0xb9, 0x97, 0xf2, 0x2d, 0x6c, 0x46, 0x37, 0x96, 0x3c,
	0xcb, 0x0f, 0xa2, 0xcf, 0x72, 0x94, 0xec, 0xb2, 0xbb, 0x13, 0x7d, 0xb5, 0x7f, 0x15, 0x40, 0x5a,
	0x54, 0x35, 0x20, 0xdc, 0x80, 0x7c, 0xe0, 0xcf, 0x19, 0xef, 0x25, 0x13, 0xb6, 0xa0, 0xcc, 0x0d,
	0x8c, 0x73, 0xe8, 0xa8, 0x0c, 0xa0, 0x14, 0xdb, 0x5a, 0xc2, 0xba, 0x1a, 0x67, 0x7d, 0x7d, 0x55,
	0x22, 0x84, 0x9f, 0xc2, 0xad, 0x60, 0x57, 0xbf, 0xb0, 0xdc, 0x08, 0xe9, 0xdb, 0xfe, 0xad, 0xf3,
	0x2d, 0xf4, 0x0b, 0x79, 0x1c, 0xac, 0x50, 0x05, 0x8a, 0xee, 0x7c, 0x3c, 0x26, 0xae, 0xdf, 0x4f,
	0xfc, 0x6a, 0xa6, 0xf7, 0x0b, 0x38, 0x6a, 0x3a, 0x38, 0x82, 0x8c, 0x3f, 0x22, 0xa0, 0x22, 0xe4,
	0x7a, 0xb5, 0x76, 0xb3, 0xde, 0x79, 0x21, 0x6d, 0xa0, 0x32, 0x40, 0x17, 0x77, 0x9a, 0x83, 0x46,
	0xbf, 0xd5, 0x69, 0x4b, 0x02, 0xda, 0x84, 0x3c, 0xd6, 0x7b, 0x3a, 0x7e, 0xa6, 0x37, 0xa5, 0xd4,
	0x81, 0x06, 0x22, 0x1b, 0x18, 0x10, 0x80, 0x78, 0xfc, 0xa4, 0x53, 0xaf, 0x3d, 0x91, 0x36, 0x90,
	0x08, 0xa9, 0x41, 0x4f, 0x12, 0x7c, 0x9b, 0x3e, 0xc0, 0x9d, 0xae, 0x2e, 0xa5, 0x50, 0x1e, 0x32,
	0xb5, 0x5e, 0xab, 0x26, 0xa5, 0x0f, 0xbe, 0x00, 0x58, 0x34, 0x18, 0x54, 0x80, 0x6c, 0xe7, 0x79,
	0x5b, 0xc7, 0xd2, 0x86, 0x0f, 0x3f, 0xd1, 0x4f, 0xea, 0x3a, 0x66, 0xae, 0xcf, 0x5a, 0xfa, 0x73,
	0x1d, 0x4b, 0x29, 0xca, 0x67, 0xd0, 0xed, 0x76, 0x70, 0x5f, 0x4a, 0x1f, 0xf4, 0x60, 0x33, 0x2a,
	0x3c, 0x7f, 0xb3, 0xab, 0xb7, 0x9b, 0xad, 0xf6, 0xb1, 0xb4, 0xe1, 0x93, 0xab, 0x35, 0x1a, 0x7a,
	0xb7, 0xaf, 0x37, 0x39, 0xd5, 0xaf, 0xf5, 0x86, 0xbf, 0xa2, 0xa7, 0xe8, 0x2f, 0xba, 0x2d, 0xac,
	0x37, 0xa5, 0x34, 0x2a, 0x41, 0xa1, 0xdd, 0xe9, 0x9f, 0x7e, 0xd5, 0x19, 0xb4, 0x9b, 0x52, 0x46,
	0xfb, 0x3d, 0x0b, 0x79, 0x5e, 0x24, 0x54, 0x07, 0x91, 0xa5, 0x14, 0xc9, 0x91, 0xa9, 0x28, 0x36,
	0xd1, 0x29, 0x1f, 0x24, 0x4b, 0x94, 0x28, 0xc2, 0x23, 0x10, 0xd9, 0x78, 0x89, 0x6e, 0x2f, 0x9f,
	0x37, 0x95, 0x6b, 0x8b, 0x8c, 0xbe, 0x84, 0x3c, 0xff, 0xdc, 0x0a, 0x06, 0xd7, 0xfb, 0xeb, 0x50,
	0x8c, 0xb4, 0x28, 0x74, 0x27, 0x04, 0x5e, 0x6d, 0x5c, 0xca, 0x7b, 0xd7, 0xea, 0x19, 0xe9, 0x50,
	0x08, 0x47, 0x38, 0xb4, 0xc0, 0x25, 0xc7, 0x3a, 0x65, 0xf5, 0x1d, 0x43, 0xdf, 0xc0, 0x66, 0x74,
	0xb8, 0x42, 0xef, 0x47, 0x22, 0xba, 0x32, 0x73, 0xdd, 0x74, 0x58, 0x1d, 0x60, 0xd1, 0xb1, 0x91,
	0x12, 0x8d, 0x2c, 0xde, 0xc6, 0x23, 0xe9, 0x49, 0x76, 0x21, 0x76, 0x46, 0xd0, 0x5f, 0xe3, 0x67,
	0xc4, 0x7b, 0x74, 0xe4, 0x8c, 0x64, 0x37, 0x7e, 0x0c, 0x22, 0x33, 0x45, 0xca, 0x1b, 0x1b, 0x2a,
	0x94, 0xd5, 0x6d, 0xd2, 0xcf, 0x4a, 0x74, 0x14, 0x89, 0x64, 0x65, 0xc9, 0x84, 0x72, 0x43, 0x56,
	0xea, 0x1f, 0x7d, 0xb7, 0x3b, 0xb6, 0xbc, 0x57, 0xf3, 0x61, 0x75, 0x64, 0x4f, 0x0e, 0xdf, 0xcc,
	0x87, 0xe4, 0x82, 0xfd, 0x6d, 0xbb, 0x3f, 0xb6, 0x0f, 0x03, 0xcf, 0xa1, 0x48, 0x2d, 0x0f, 0xfe,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x66, 0xd6, 0x6d, 0xc0, 0xf0, 0x0d, 0x00, 0x00,
}
