// Code generated by protoc-gen-go.
// source: notify.proto
// DO NOT EDIT!

/*
Package notify is a generated protocol buffer package.

It is generated from these files:
	notify.proto

It has these top-level messages:
	NotificationRequest
	NotificationDataRequest
	NotificationResponse
	NotificationUpdateResponse
*/
package notify

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NotificationRequest struct {
	NotificationUid string `protobuf:"bytes,1,opt,name=notification_uid,json=notificationUid" json:"notification_uid,omitempty"`
}

func (m *NotificationRequest) Reset()                    { *m = NotificationRequest{} }
func (m *NotificationRequest) String() string            { return proto.CompactTextString(m) }
func (*NotificationRequest) ProtoMessage()               {}
func (*NotificationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NotificationRequest) GetNotificationUid() string {
	if m != nil {
		return m.NotificationUid
	}
	return ""
}

type NotificationDataRequest struct {
	NotificationId  string            `protobuf:"bytes,1,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
	NotificationUid string            `protobuf:"bytes,2,opt,name=notification_uid,json=notificationUid" json:"notification_uid,omitempty"`
	ProjectId       string            `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	TargetId        []string          `protobuf:"bytes,4,rep,name=target_id,json=targetId" json:"target_id,omitempty"`
	Percentage      int32             `protobuf:"varint,5,opt,name=percentage" json:"percentage,omitempty"`
	Data            map[string]string `protobuf:"bytes,6,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NotificationDataRequest) Reset()                    { *m = NotificationDataRequest{} }
func (m *NotificationDataRequest) String() string            { return proto.CompactTextString(m) }
func (*NotificationDataRequest) ProtoMessage()               {}
func (*NotificationDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NotificationDataRequest) GetNotificationId() string {
	if m != nil {
		return m.NotificationId
	}
	return ""
}

func (m *NotificationDataRequest) GetNotificationUid() string {
	if m != nil {
		return m.NotificationUid
	}
	return ""
}

func (m *NotificationDataRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *NotificationDataRequest) GetTargetId() []string {
	if m != nil {
		return m.TargetId
	}
	return nil
}

func (m *NotificationDataRequest) GetPercentage() int32 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

func (m *NotificationDataRequest) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type NotificationResponse struct {
	NotificationUid string                     `protobuf:"bytes,1,opt,name=notification_uid,json=notificationUid" json:"notification_uid,omitempty"`
	NotificationId  string                     `protobuf:"bytes,2,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
	ProjectId       string                     `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Percentage      int32                      `protobuf:"varint,4,opt,name=percentage" json:"percentage,omitempty"`
	IsComplete      bool                       `protobuf:"varint,5,opt,name=is_complete,json=isComplete" json:"is_complete,omitempty"`
	Started         *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=started" json:"started,omitempty"`
	LastUpdate      *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=last_update,json=lastUpdate" json:"last_update,omitempty"`
}

func (m *NotificationResponse) Reset()                    { *m = NotificationResponse{} }
func (m *NotificationResponse) String() string            { return proto.CompactTextString(m) }
func (*NotificationResponse) ProtoMessage()               {}
func (*NotificationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NotificationResponse) GetNotificationUid() string {
	if m != nil {
		return m.NotificationUid
	}
	return ""
}

func (m *NotificationResponse) GetNotificationId() string {
	if m != nil {
		return m.NotificationId
	}
	return ""
}

func (m *NotificationResponse) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *NotificationResponse) GetPercentage() int32 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

func (m *NotificationResponse) GetIsComplete() bool {
	if m != nil {
		return m.IsComplete
	}
	return false
}

func (m *NotificationResponse) GetStarted() *google_protobuf.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *NotificationResponse) GetLastUpdate() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastUpdate
	}
	return nil
}

type NotificationUpdateResponse struct {
	NotificationUid string `protobuf:"bytes,1,opt,name=notification_uid,json=notificationUid" json:"notification_uid,omitempty"`
	Message         string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Success         bool   `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
}

func (m *NotificationUpdateResponse) Reset()                    { *m = NotificationUpdateResponse{} }
func (m *NotificationUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*NotificationUpdateResponse) ProtoMessage()               {}
func (*NotificationUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NotificationUpdateResponse) GetNotificationUid() string {
	if m != nil {
		return m.NotificationUid
	}
	return ""
}

func (m *NotificationUpdateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *NotificationUpdateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*NotificationRequest)(nil), "notify.NotificationRequest")
	proto.RegisterType((*NotificationDataRequest)(nil), "notify.NotificationDataRequest")
	proto.RegisterType((*NotificationResponse)(nil), "notify.NotificationResponse")
	proto.RegisterType((*NotificationUpdateResponse)(nil), "notify.NotificationUpdateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Notify service

type NotifyClient interface {
	Send(ctx context.Context, in *NotificationDataRequest, opts ...grpc.CallOption) (*NotificationUpdateResponse, error)
	Update(ctx context.Context, in *NotificationDataRequest, opts ...grpc.CallOption) (*NotificationUpdateResponse, error)
	Retrieve(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error)
}

type notifyClient struct {
	cc *grpc.ClientConn
}

func NewNotifyClient(cc *grpc.ClientConn) NotifyClient {
	return &notifyClient{cc}
}

func (c *notifyClient) Send(ctx context.Context, in *NotificationDataRequest, opts ...grpc.CallOption) (*NotificationUpdateResponse, error) {
	out := new(NotificationUpdateResponse)
	err := grpc.Invoke(ctx, "/notify.Notify/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) Update(ctx context.Context, in *NotificationDataRequest, opts ...grpc.CallOption) (*NotificationUpdateResponse, error) {
	out := new(NotificationUpdateResponse)
	err := grpc.Invoke(ctx, "/notify.Notify/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) Retrieve(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := grpc.Invoke(ctx, "/notify.Notify/Retrieve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notify service

type NotifyServer interface {
	Send(context.Context, *NotificationDataRequest) (*NotificationUpdateResponse, error)
	Update(context.Context, *NotificationDataRequest) (*NotificationUpdateResponse, error)
	Retrieve(context.Context, *NotificationRequest) (*NotificationResponse, error)
}

func RegisterNotifyServer(s *grpc.Server, srv NotifyServer) {
	s.RegisterService(&_Notify_serviceDesc, srv)
}

func _Notify_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notify.Notify/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).Send(ctx, req.(*NotificationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notify.Notify/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).Update(ctx, req.(*NotificationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notify.Notify/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).Retrieve(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notify_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notify.Notify",
	HandlerType: (*NotifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Notify_Send_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Notify_Update_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Notify_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notify.proto",
}

func init() { proto.RegisterFile("notify.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x94, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x49, 0xdb, 0x4d, 0x9b, 0x57, 0xd1, 0x65, 0x5c, 0x30, 0x64, 0xd5, 0x86, 0x5c, 0xcc,
	0x1e, 0x4c, 0xa1, 0x0a, 0x8a, 0x22, 0x88, 0xba, 0x87, 0x22, 0x7a, 0x88, 0xee, 0xc5, 0x4b, 0x99,
	0x26, 0x6f, 0xe3, 0xb8, 0x4d, 0x26, 0x66, 0x5e, 0x16, 0x8b, 0x9f, 0xcd, 0x83, 0x9f, 0xc7, 0x2f,
	0x21, 0xc9, 0x24, 0x4b, 0xaa, 0x91, 0xa2, 0x78, 0x9b, 0xf7, 0x9b, 0xff, 0xfc, 0x27, 0xef, 0x3f,
	0x8f, 0xc0, 0xb5, 0x4c, 0x92, 0x38, 0xdf, 0x06, 0x79, 0x21, 0x49, 0x32, 0x53, 0x57, 0xce, 0x2c,
	0x91, 0x32, 0xd9, 0xe0, 0xbc, 0xa6, 0xeb, 0xf2, 0x7c, 0x4e, 0x22, 0x45, 0x45, 0x3c, 0xcd, 0xb5,
	0xd0, 0x7b, 0x0e, 0x37, 0xdf, 0x56, 0x52, 0x11, 0x71, 0x12, 0x32, 0x0b, 0xf1, 0x73, 0x89, 0x8a,
	0xd8, 0x09, 0x1c, 0x66, 0x1d, 0xbc, 0x2a, 0x45, 0x6c, 0x1b, 0xae, 0xe1, 0x5b, 0xe1, 0x8d, 0x2e,
	0x3f, 0x13, 0xb1, 0xf7, 0x7d, 0x00, 0xb7, 0xba, 0x16, 0xaf, 0x38, 0xf1, 0xd6, 0xe6, 0x1e, 0xec,
	0xc8, 0x57, 0x57, 0x2e, 0xd7, 0xbb, 0x78, 0x19, 0xf7, 0xde, 0x37, 0xe8, 0xbd, 0x8f, 0xdd, 0x01,
	0xc8, 0x0b, 0xf9, 0x09, 0x23, 0xaa, 0xec, 0x86, 0xb5, 0xc8, 0x6a, 0xc8, 0x32, 0x66, 0xc7, 0x60,
	0x11, 0x2f, 0x12, 0xac, 0x77, 0x47, 0xee, 0xd0, 0xb7, 0xc2, 0x89, 0x06, 0xcb, 0x98, 0xdd, 0x05,
	0xc8, 0xb1, 0x88, 0x30, 0x23, 0x9e, 0xa0, 0x7d, 0xe0, 0x1a, 0xfe, 0x41, 0xd8, 0x21, 0xec, 0x19,
	0x8c, 0x62, 0x4e, 0xdc, 0x36, 0xdd, 0xa1, 0x3f, 0x5d, 0x9c, 0x04, 0x4d, 0xa6, 0x7f, 0x68, 0x2f,
	0xa8, 0xd6, 0xa7, 0x19, 0x15, 0xdb, 0xb0, 0x3e, 0xe6, 0x3c, 0x02, 0xeb, 0x0a, 0xb1, 0x43, 0x18,
	0x5e, 0xe0, 0xb6, 0xe9, 0xb7, 0x5a, 0xb2, 0x23, 0x38, 0xb8, 0xe4, 0x9b, 0x12, 0x9b, 0xce, 0x74,
	0xf1, 0x64, 0xf0, 0xd8, 0xf0, 0xbe, 0x0d, 0xe0, 0x68, 0xf7, 0x19, 0x54, 0x2e, 0x33, 0x85, 0x7f,
	0xf1, 0x0e, 0x7d, 0x59, 0x0f, 0x7a, 0xb3, 0xde, 0x13, 0xe0, 0x6e, 0x46, 0xa3, 0xdf, 0x32, 0x9a,
	0xc1, 0x54, 0xa8, 0x55, 0x24, 0xd3, 0x7c, 0x83, 0xa4, 0x43, 0x9c, 0x84, 0x20, 0xd4, 0xcb, 0x86,
	0xb0, 0x87, 0x30, 0x56, 0xc4, 0x0b, 0xc2, 0xd8, 0x36, 0x5d, 0xc3, 0x9f, 0x2e, 0x9c, 0x40, 0x4f,
	0x61, 0xd0, 0x4e, 0x61, 0xf0, 0xbe, 0x9d, 0xc2, 0xb0, 0x95, 0xb2, 0xa7, 0x30, 0xdd, 0x70, 0x45,
	0xab, 0x32, 0x8f, 0x39, 0xa1, 0x3d, 0xde, 0x7b, 0x12, 0x2a, 0xf9, 0x59, 0xad, 0xf6, 0xbe, 0x82,
	0xd3, 0x8d, 0x4f, 0xd3, 0x7f, 0x09, 0xd1, 0x86, 0x71, 0x8a, 0x4a, 0x55, 0x9d, 0xeb, 0xf0, 0xda,
	0xb2, 0xda, 0x51, 0x65, 0x14, 0xa1, 0x52, 0x75, 0x64, 0x93, 0xb0, 0x2d, 0x17, 0x3f, 0x0c, 0x30,
	0xeb, 0xdb, 0xb7, 0xec, 0x35, 0x8c, 0xde, 0x61, 0x16, 0xb3, 0xd9, 0x9e, 0xc9, 0x71, 0xbc, 0x3e,
	0xc1, 0x2f, 0x9f, 0xfd, 0x06, 0x4c, 0x4d, 0xfe, 0x8f, 0xdd, 0x29, 0x4c, 0x42, 0xa4, 0x42, 0xe0,
	0x25, 0xb2, 0xe3, 0x3e, 0x7d, 0x6b, 0x76, 0xbb, 0x7f, 0x53, 0xdb, 0xbc, 0xf0, 0x3e, 0xb8, 0x89,
	0xa0, 0x8f, 0xe5, 0x3a, 0x88, 0x64, 0x3a, 0xbf, 0x28, 0xd7, 0xf8, 0x45, 0xff, 0x5d, 0xee, 0x27,
	0x72, 0xae, 0x0f, 0xae, 0xcd, 0x1a, 0x3c, 0xf8, 0x19, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x5a, 0xef,
	0x09, 0x94, 0x04, 0x00, 0x00,
}
