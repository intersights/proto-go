// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datapipe.proto

/*
Package datapipe is a generated protocol buffer package.

It is generated from these files:
	datapipe.proto

It has these top-level messages:
	Source
	Entity
	Relationship
	Measurement
	Event
	MutateEntityResponse
	RelateResponse
	WriteInstrumentResponse
	WriteMetricResponse
	CreateEventResponse
*/
package datapipe

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Entity_State int32

const (
	Entity_pending  Entity_State = 0
	Entity_active   Entity_State = 1
	Entity_archived Entity_State = 2
	Entity_delete   Entity_State = 3
)

var Entity_State_name = map[int32]string{
	0: "pending",
	1: "active",
	2: "archived",
	3: "delete",
}
var Entity_State_value = map[string]int32{
	"pending":  0,
	"active":   1,
	"archived": 2,
	"delete":   3,
}

func (x Entity_State) String() string {
	return proto.EnumName(Entity_State_name, int32(x))
}
func (Entity_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Source struct {
	TrackerId  string                     `protobuf:"bytes,1,opt,name=tracker_id,json=trackerId" json:"tracker_id,omitempty"`
	Occurred   *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=occurred" json:"occurred,omitempty"`
	Attributes map[string]string          `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Source) GetTrackerId() string {
	if m != nil {
		return m.TrackerId
	}
	return ""
}

func (m *Source) GetOccurred() *google_protobuf.Timestamp {
	if m != nil {
		return m.Occurred
	}
	return nil
}

func (m *Source) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Entity struct {
	Id            string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name          string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description   string            `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	State         Entity_State      `protobuf:"varint,4,opt,name=state,enum=datapipe.Entity_State" json:"state,omitempty"`
	Status        float64           `protobuf:"fixed64,5,opt,name=status" json:"status,omitempty"`
	Schema        string            `protobuf:"bytes,6,opt,name=schema" json:"schema,omitempty"`
	SchemaVersion int32             `protobuf:"varint,7,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	Attributes    map[string]string `protobuf:"bytes,8,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Labels        map[string]string `protobuf:"bytes,9,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Source        *Source           `protobuf:"bytes,10,opt,name=source" json:"source,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Entity) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Entity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Entity) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Entity) GetState() Entity_State {
	if m != nil {
		return m.State
	}
	return Entity_pending
}

func (m *Entity) GetStatus() float64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Entity) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *Entity) GetSchemaVersion() int32 {
	if m != nil {
		return m.SchemaVersion
	}
	return 0
}

func (m *Entity) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Entity) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Entity) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type Relationship struct {
	EntityId         string            `protobuf:"bytes,1,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	RelatedEntityId  string            `protobuf:"bytes,2,opt,name=related_entity_id,json=relatedEntityId" json:"related_entity_id,omitempty"`
	RelationshipType string            `protobuf:"bytes,3,opt,name=relationship_type,json=relationshipType" json:"relationship_type,omitempty"`
	Attributes       map[string]string `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Source           *Source           `protobuf:"bytes,5,opt,name=source" json:"source,omitempty"`
}

func (m *Relationship) Reset()                    { *m = Relationship{} }
func (m *Relationship) String() string            { return proto.CompactTextString(m) }
func (*Relationship) ProtoMessage()               {}
func (*Relationship) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Relationship) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *Relationship) GetRelatedEntityId() string {
	if m != nil {
		return m.RelatedEntityId
	}
	return ""
}

func (m *Relationship) GetRelationshipType() string {
	if m != nil {
		return m.RelationshipType
	}
	return ""
}

func (m *Relationship) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Relationship) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type Measurement struct {
	EntityId string  `protobuf:"bytes,1,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	Property string  `protobuf:"bytes,2,opt,name=property" json:"property,omitempty"`
	Value    int64   `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	Source   *Source `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
}

func (m *Measurement) Reset()                    { *m = Measurement{} }
func (m *Measurement) String() string            { return proto.CompactTextString(m) }
func (*Measurement) ProtoMessage()               {}
func (*Measurement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Measurement) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *Measurement) GetProperty() string {
	if m != nil {
		return m.Property
	}
	return ""
}

func (m *Measurement) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Measurement) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type Event struct {
	EntityId         string             `protobuf:"bytes,1,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	EventId          string             `protobuf:"bytes,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Source           *Source            `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	Schema           string             `protobuf:"bytes,4,opt,name=schema" json:"schema,omitempty"`
	SchemaVersion    int32              `protobuf:"varint,5,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	Attributes       map[string]string  `protobuf:"bytes,6,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	JsonLd           string             `protobuf:"bytes,7,opt,name=jsonLd" json:"jsonLd,omitempty"`
	RelatedEntityIds []string           `protobuf:"bytes,8,rep,name=related_entity_ids,json=relatedEntityIds" json:"related_entity_ids,omitempty"`
	Extensions       []*Event_Extension `protobuf:"bytes,9,rep,name=extensions" json:"extensions,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Event) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *Event) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *Event) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Event) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *Event) GetSchemaVersion() int32 {
	if m != nil {
		return m.SchemaVersion
	}
	return 0
}

func (m *Event) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Event) GetJsonLd() string {
	if m != nil {
		return m.JsonLd
	}
	return ""
}

func (m *Event) GetRelatedEntityIds() []string {
	if m != nil {
		return m.RelatedEntityIds
	}
	return nil
}

func (m *Event) GetExtensions() []*Event_Extension {
	if m != nil {
		return m.Extensions
	}
	return nil
}

type Event_Extension struct {
	Schema        string            `protobuf:"bytes,1,opt,name=schema" json:"schema,omitempty"`
	SchemaVersion int32             `protobuf:"varint,2,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	Attributes    map[string]string `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Event_Extension) Reset()                    { *m = Event_Extension{} }
func (m *Event_Extension) String() string            { return proto.CompactTextString(m) }
func (*Event_Extension) ProtoMessage()               {}
func (*Event_Extension) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

func (m *Event_Extension) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *Event_Extension) GetSchemaVersion() int32 {
	if m != nil {
		return m.SchemaVersion
	}
	return 0
}

func (m *Event_Extension) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type MutateEntityResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *MutateEntityResponse) Reset()                    { *m = MutateEntityResponse{} }
func (m *MutateEntityResponse) String() string            { return proto.CompactTextString(m) }
func (*MutateEntityResponse) ProtoMessage()               {}
func (*MutateEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MutateEntityResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RelateResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RelateResponse) Reset()                    { *m = RelateResponse{} }
func (m *RelateResponse) String() string            { return proto.CompactTextString(m) }
func (*RelateResponse) ProtoMessage()               {}
func (*RelateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RelateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type WriteInstrumentResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *WriteInstrumentResponse) Reset()                    { *m = WriteInstrumentResponse{} }
func (m *WriteInstrumentResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteInstrumentResponse) ProtoMessage()               {}
func (*WriteInstrumentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *WriteInstrumentResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type WriteMetricResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *WriteMetricResponse) Reset()                    { *m = WriteMetricResponse{} }
func (m *WriteMetricResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteMetricResponse) ProtoMessage()               {}
func (*WriteMetricResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *WriteMetricResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type CreateEventResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *CreateEventResponse) Reset()                    { *m = CreateEventResponse{} }
func (m *CreateEventResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateEventResponse) ProtoMessage()               {}
func (*CreateEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateEventResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Source)(nil), "datapipe.Source")
	proto.RegisterType((*Entity)(nil), "datapipe.Entity")
	proto.RegisterType((*Relationship)(nil), "datapipe.Relationship")
	proto.RegisterType((*Measurement)(nil), "datapipe.Measurement")
	proto.RegisterType((*Event)(nil), "datapipe.Event")
	proto.RegisterType((*Event_Extension)(nil), "datapipe.Event.Extension")
	proto.RegisterType((*MutateEntityResponse)(nil), "datapipe.MutateEntityResponse")
	proto.RegisterType((*RelateResponse)(nil), "datapipe.RelateResponse")
	proto.RegisterType((*WriteInstrumentResponse)(nil), "datapipe.WriteInstrumentResponse")
	proto.RegisterType((*WriteMetricResponse)(nil), "datapipe.WriteMetricResponse")
	proto.RegisterType((*CreateEventResponse)(nil), "datapipe.CreateEventResponse")
	proto.RegisterEnum("datapipe.Entity_State", Entity_State_name, Entity_State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DataPipe service

type DataPipeClient interface {
	MutateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*MutateEntityResponse, error)
	Relate(ctx context.Context, in *Relationship, opts ...grpc.CallOption) (*RelateResponse, error)
	WriteInstrument(ctx context.Context, in *Measurement, opts ...grpc.CallOption) (*WriteInstrumentResponse, error)
	WriteMetric(ctx context.Context, in *Measurement, opts ...grpc.CallOption) (*WriteMetricResponse, error)
	CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*CreateEventResponse, error)
}

type dataPipeClient struct {
	cc *grpc.ClientConn
}

func NewDataPipeClient(cc *grpc.ClientConn) DataPipeClient {
	return &dataPipeClient{cc}
}

func (c *dataPipeClient) MutateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*MutateEntityResponse, error) {
	out := new(MutateEntityResponse)
	err := grpc.Invoke(ctx, "/datapipe.DataPipe/MutateEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipeClient) Relate(ctx context.Context, in *Relationship, opts ...grpc.CallOption) (*RelateResponse, error) {
	out := new(RelateResponse)
	err := grpc.Invoke(ctx, "/datapipe.DataPipe/Relate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipeClient) WriteInstrument(ctx context.Context, in *Measurement, opts ...grpc.CallOption) (*WriteInstrumentResponse, error) {
	out := new(WriteInstrumentResponse)
	err := grpc.Invoke(ctx, "/datapipe.DataPipe/WriteInstrument", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipeClient) WriteMetric(ctx context.Context, in *Measurement, opts ...grpc.CallOption) (*WriteMetricResponse, error) {
	out := new(WriteMetricResponse)
	err := grpc.Invoke(ctx, "/datapipe.DataPipe/WriteMetric", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPipeClient) CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	out := new(CreateEventResponse)
	err := grpc.Invoke(ctx, "/datapipe.DataPipe/CreateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataPipe service

type DataPipeServer interface {
	MutateEntity(context.Context, *Entity) (*MutateEntityResponse, error)
	Relate(context.Context, *Relationship) (*RelateResponse, error)
	WriteInstrument(context.Context, *Measurement) (*WriteInstrumentResponse, error)
	WriteMetric(context.Context, *Measurement) (*WriteMetricResponse, error)
	CreateEvent(context.Context, *Event) (*CreateEventResponse, error)
}

func RegisterDataPipeServer(s *grpc.Server, srv DataPipeServer) {
	s.RegisterService(&_DataPipe_serviceDesc, srv)
}

func _DataPipe_MutateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipeServer).MutateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapipe.DataPipe/MutateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipeServer).MutateEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipe_Relate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Relationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipeServer).Relate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapipe.DataPipe/Relate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipeServer).Relate(ctx, req.(*Relationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipe_WriteInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Measurement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipeServer).WriteInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapipe.DataPipe/WriteInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipeServer).WriteInstrument(ctx, req.(*Measurement))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipe_WriteMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Measurement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipeServer).WriteMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapipe.DataPipe/WriteMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipeServer).WriteMetric(ctx, req.(*Measurement))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPipe_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPipeServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datapipe.DataPipe/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPipeServer).CreateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataPipe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datapipe.DataPipe",
	HandlerType: (*DataPipeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MutateEntity",
			Handler:    _DataPipe_MutateEntity_Handler,
		},
		{
			MethodName: "Relate",
			Handler:    _DataPipe_Relate_Handler,
		},
		{
			MethodName: "WriteInstrument",
			Handler:    _DataPipe_WriteInstrument_Handler,
		},
		{
			MethodName: "WriteMetric",
			Handler:    _DataPipe_WriteMetric_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _DataPipe_CreateEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datapipe.proto",
}

func init() { proto.RegisterFile("datapipe.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 870 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0xc7, 0x49, 0xec, 0x75, 0x5e, 0x96, 0x6c, 0x18, 0xca, 0xe2, 0x1a, 0x4a, 0x43, 0x04, 0x28,
	0x94, 0x92, 0xa0, 0x2d, 0x42, 0x74, 0xa5, 0x8a, 0x42, 0x09, 0x52, 0x44, 0x57, 0x42, 0x6e, 0x05,
	0x12, 0x97, 0xd5, 0xc4, 0x7e, 0x64, 0x87, 0x4d, 0x6c, 0x6b, 0x66, 0x1c, 0x35, 0x37, 0x4e, 0x7c,
	0x19, 0xce, 0x7c, 0x13, 0x2e, 0xdc, 0xf8, 0x28, 0xc8, 0x33, 0x76, 0x3c, 0x75, 0xb3, 0xd9, 0x54,
	0x55, 0x6f, 0xf3, 0xfe, 0xbf, 0xf9, 0xfd, 0xe6, 0x3d, 0x1b, 0xba, 0x11, 0x95, 0x34, 0x65, 0x29,
	0x8e, 0x52, 0x9e, 0xc8, 0x84, 0xb8, 0xa5, 0xec, 0xdf, 0x9e, 0x27, 0xc9, 0x7c, 0x81, 0x63, 0xa5,
	0x9f, 0x65, 0xbf, 0x8d, 0x25, 0x5b, 0xa2, 0x90, 0x74, 0x99, 0x6a, 0xd7, 0xc1, 0x7f, 0x16, 0x38,
	0x4f, 0x92, 0x8c, 0x87, 0x48, 0x6e, 0x01, 0x48, 0x4e, 0xc3, 0x4b, 0xe4, 0xe7, 0x2c, 0xf2, 0xac,
	0xbe, 0x35, 0x6c, 0x07, 0xed, 0x42, 0x33, 0x8d, 0xc8, 0x57, 0xe0, 0x26, 0x61, 0x98, 0x71, 0x8e,
	0x91, 0xd7, 0xe8, 0x5b, 0xc3, 0xce, 0x89, 0x3f, 0xd2, 0xd9, 0x47, 0x65, 0xf6, 0xd1, 0xd3, 0x32,
	0x7b, 0xb0, 0xf1, 0x25, 0x0f, 0x01, 0xa8, 0x94, 0x9c, 0xcd, 0x32, 0x89, 0xc2, 0x6b, 0xf6, 0x9b,
	0xc3, 0xce, 0x49, 0x7f, 0xb4, 0xe9, 0x58, 0x17, 0x1f, 0x7d, 0xbb, 0x71, 0x99, 0xc4, 0x92, 0xaf,
	0x03, 0x23, 0xc6, 0x7f, 0x00, 0x47, 0x35, 0x33, 0xe9, 0x41, 0xf3, 0x12, 0xd7, 0x45, 0x93, 0xf9,
	0x91, 0xdc, 0x00, 0x7b, 0x45, 0x17, 0x19, 0xaa, 0xde, 0xda, 0x81, 0x16, 0x4e, 0x1b, 0x5f, 0x5b,
	0x83, 0xbf, 0x5a, 0xe0, 0x4c, 0x62, 0xc9, 0xe4, 0x9a, 0x74, 0xa1, 0xb1, 0xb9, 0x5a, 0x83, 0x45,
	0x84, 0x40, 0x2b, 0xa6, 0xcb, 0x32, 0x46, 0x9d, 0x49, 0x1f, 0x3a, 0x11, 0x8a, 0x90, 0xb3, 0x54,
	0xb2, 0x24, 0xf6, 0x9a, 0xca, 0x64, 0xaa, 0xc8, 0x5d, 0xb0, 0x85, 0xa4, 0x12, 0xbd, 0x56, 0xdf,
	0x1a, 0x76, 0x4f, 0x8e, 0xab, 0xcb, 0xe8, 0x32, 0xa3, 0x27, 0xb9, 0x35, 0xd0, 0x4e, 0xe4, 0x18,
	0x9c, 0xfc, 0x90, 0x09, 0xcf, 0xee, 0x5b, 0x43, 0x2b, 0x28, 0x24, 0xa5, 0x0f, 0x2f, 0x70, 0x49,
	0x3d, 0x47, 0x95, 0x28, 0x24, 0xf2, 0x31, 0x74, 0xf5, 0xe9, 0x7c, 0x85, 0x5c, 0xe4, 0x2d, 0x1c,
	0xf4, 0xad, 0xa1, 0x1d, 0xbc, 0xa9, 0xb5, 0x3f, 0x6b, 0x65, 0x0d, 0x56, 0xb7, 0x0e, 0x6b, 0xd1,
	0xc9, 0x0e, 0x58, 0xc9, 0x97, 0xe0, 0x2c, 0xe8, 0x0c, 0x17, 0xc2, 0x6b, 0xab, 0xe8, 0xf7, 0x5f,
	0x88, 0x7e, 0xac, 0xcc, 0x3a, 0xb2, 0xf0, 0x25, 0x43, 0x70, 0x84, 0xa2, 0xcc, 0x03, 0xf5, 0x08,
	0x7a, 0x75, 0x2a, 0x83, 0xc2, 0xfe, 0x8a, 0xb4, 0xf9, 0xf7, 0xa1, 0x63, 0xd4, 0x7f, 0x29, 0xc6,
	0x4f, 0xc1, 0x56, 0x14, 0x90, 0x0e, 0x1c, 0xa4, 0x18, 0x47, 0x2c, 0x9e, 0xf7, 0xde, 0x20, 0x00,
	0x0e, 0x0d, 0x25, 0x5b, 0x61, 0xcf, 0x22, 0x87, 0xe0, 0x52, 0x1e, 0x5e, 0xb0, 0x15, 0x46, 0xbd,
	0x46, 0x6e, 0x89, 0x70, 0x81, 0x12, 0x7b, 0xcd, 0xc1, 0xdf, 0x0d, 0x38, 0x0c, 0x70, 0x41, 0x73,
	0xa6, 0xc5, 0x05, 0x4b, 0xc9, 0x7b, 0xd0, 0x46, 0x05, 0x47, 0x35, 0x15, 0xae, 0x56, 0x4c, 0x23,
	0x72, 0x07, 0xde, 0xe2, 0xb9, 0x33, 0x46, 0xe7, 0x95, 0x93, 0xee, 0xe7, 0xa8, 0x30, 0x4c, 0x4a,
	0xdf, 0xcf, 0x0a, 0xdf, 0x22, 0xf1, 0xb9, 0x5c, 0xa7, 0x58, 0x3c, 0xaf, 0x9e, 0x69, 0x78, 0xba,
	0x4e, 0x91, 0xfc, 0xf0, 0x1c, 0xbd, 0x2d, 0x45, 0xd0, 0x27, 0x15, 0xd4, 0x66, 0x87, 0x3b, 0x49,
	0xae, 0xe8, 0xb2, 0x5f, 0x2b, 0x5d, 0x83, 0x3f, 0x2d, 0xe8, 0x9c, 0x21, 0x15, 0x19, 0xc7, 0x25,
	0xc6, 0x72, 0x37, 0x6c, 0x3e, 0xb8, 0x29, 0x4f, 0x52, 0xe4, 0x72, 0x5d, 0x64, 0xda, 0xc8, 0x55,
	0x89, 0x1c, 0x9a, 0x66, 0x51, 0xc2, 0xb8, 0x47, 0x6b, 0xf7, 0x3d, 0x06, 0x7f, 0xd8, 0x60, 0x4f,
	0x56, 0xd7, 0xb6, 0x70, 0x13, 0x5c, 0xcc, 0xbd, 0x2a, 0xc2, 0x0e, 0x94, 0x3c, 0x8d, 0x8c, 0x5a,
	0xcd, 0xdd, 0xb5, 0x8c, 0x19, 0x6e, 0x5d, 0x33, 0xc3, 0xf6, 0xb6, 0x19, 0xfe, 0xe6, 0x39, 0x92,
	0x1d, 0x45, 0xf2, 0x6d, 0x63, 0x0a, 0xf3, 0x7e, 0x76, 0xb2, 0x7b, 0x0c, 0xce, 0xef, 0x22, 0x89,
	0x1f, 0x47, 0x6a, 0x47, 0xb4, 0x83, 0x42, 0x22, 0x77, 0x81, 0xbc, 0xf0, 0x2c, 0xf5, 0x92, 0x28,
	0xdf, 0x5a, 0xf5, 0x2e, 0x05, 0xb9, 0x0f, 0x80, 0xcf, 0x24, 0xc6, 0x79, 0x4f, 0xe5, 0x32, 0xb8,
	0x59, 0x6f, 0x63, 0x52, 0x7a, 0x04, 0x86, 0xb3, 0xff, 0x8f, 0x05, 0xed, 0x8d, 0xc5, 0x80, 0xc3,
	0xba, 0x06, 0x8e, 0xc6, 0x36, 0x38, 0xa6, 0x5b, 0xbe, 0x14, 0x9f, 0x5e, 0xd9, 0xc7, 0x6b, 0xfc,
	0x64, 0xbc, 0xea, 0x2c, 0x7c, 0x01, 0x37, 0xce, 0xb2, 0x7c, 0x01, 0x69, 0x8c, 0x03, 0x14, 0x69,
	0x12, 0x0b, 0x24, 0x1e, 0x1c, 0x88, 0x2c, 0x0c, 0x51, 0x08, 0x95, 0xc7, 0x0d, 0x4a, 0x71, 0x70,
	0x07, 0xba, 0x6a, 0xa4, 0x71, 0x0f, 0xdf, 0x7b, 0xf0, 0xee, 0x2f, 0x9c, 0x49, 0x9c, 0xc6, 0x42,
	0xf2, 0x2c, 0x1f, 0xb6, 0x3d, 0x82, 0xc6, 0xf0, 0xb6, 0x0a, 0x3a, 0x43, 0xc9, 0x59, 0xb8, 0x5f,
	0xc0, 0x23, 0x8e, 0xf9, 0x1d, 0x56, 0x7b, 0x55, 0x38, 0xf9, 0xb7, 0x01, 0xee, 0xf7, 0x54, 0xd2,
	0x9f, 0x58, 0x8a, 0xe4, 0x21, 0x1c, 0x9a, 0x08, 0x90, 0x5e, 0xfd, 0xdb, 0xe2, 0x7f, 0x50, 0x69,
	0xb6, 0x62, 0x75, 0x0a, 0x8e, 0x46, 0x84, 0x1c, 0x6f, 0x5f, 0x7b, 0xbe, 0x57, 0xd3, 0x57, 0xd8,
	0xfd, 0x08, 0x47, 0x35, 0x84, 0xc8, 0x3b, 0x46, 0xb9, 0x6a, 0x4b, 0xf9, 0x1f, 0x56, 0xea, 0xab,
	0x30, 0x7d, 0x04, 0x1d, 0x03, 0xb9, 0xab, 0x12, 0xdd, 0xaa, 0x25, 0xaa, 0xe1, 0xfc, 0x00, 0x3a,
	0x06, 0x9a, 0xe4, 0xa8, 0xf6, 0xaa, 0xcd, 0xf0, 0x2d, 0xa8, 0x7f, 0xf7, 0xd1, 0xaf, 0x83, 0x39,
	0x93, 0x17, 0xd9, 0x6c, 0x14, 0x26, 0xcb, 0xf1, 0x65, 0x36, 0xc3, 0x67, 0xfa, 0x97, 0xee, 0xf3,
	0x79, 0x32, 0x2e, 0x23, 0x67, 0x8e, 0x52, 0xdd, 0xfb, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xd6,
	0xf4, 0x25, 0x0f, 0x0a, 0x00, 0x00,
}
