// Code generated by protoc-gen-go.
// source: sights.proto
// DO NOT EDIT!

/*
Package pbsights is a generated protocol buffer package.

It is generated from these files:
	sights.proto

It has these top-level messages:
	SightSource
	Sight
	SightResponse
*/
package pbsights

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SourceType int32

const (
	SourceType_Web        SourceType = 0
	SourceType_Mobile     SourceType = 1
	SourceType_API        SourceType = 2
	SourceType_Phone      SourceType = 3
	SourceType_Real_World SourceType = 4
	SourceType_Webhook    SourceType = 5
	SourceType_Other      SourceType = 6
)

var SourceType_name = map[int32]string{
	0: "Web",
	1: "Mobile",
	2: "API",
	3: "Phone",
	4: "Real_World",
	5: "Webhook",
	6: "Other",
}
var SourceType_value = map[string]int32{
	"Web":        0,
	"Mobile":     1,
	"API":        2,
	"Phone":      3,
	"Real_World": 4,
	"Webhook":    5,
	"Other":      6,
}

func (x SourceType) String() string {
	return proto.EnumName(SourceType_name, int32(x))
}
func (SourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SightType int32

const (
	SightType_Event    SightType = 0
	SightType_Property SightType = 1
	SightType_Heatmap  SightType = 2
	SightType_Form     SightType = 3
	SightType_Relate   SightType = 4
	SightType_Generic  SightType = 5
)

var SightType_name = map[int32]string{
	0: "Event",
	1: "Property",
	2: "Heatmap",
	3: "Form",
	4: "Relate",
	5: "Generic",
}
var SightType_value = map[string]int32{
	"Event":    0,
	"Property": 1,
	"Heatmap":  2,
	"Form":     3,
	"Relate":   4,
	"Generic":  5,
}

func (x SightType) String() string {
	return proto.EnumName(SightType_name, int32(x))
}
func (SightType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SightSource struct {
	TrackerId        string                     `protobuf:"bytes,1,opt,name=tracker_id,json=trackerId" json:"tracker_id,omitempty"`
	RequestId        string                     `protobuf:"bytes,2,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	ProfileVendor    string                     `protobuf:"bytes,3,opt,name=profile_vendor,json=profileVendor" json:"profile_vendor,omitempty"`
	RequestStartTime *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=request_start_time,json=requestStartTime" json:"request_start_time,omitempty"`
	SourceType       SourceType                 `protobuf:"varint,5,opt,name=source_type,json=sourceType,enum=pbsights.SourceType" json:"source_type,omitempty"`
	Hostname         string                     `protobuf:"bytes,6,opt,name=hostname" json:"hostname,omitempty"`
	Ip               string                     `protobuf:"bytes,7,opt,name=ip" json:"ip,omitempty"`
	UserAgent        string                     `protobuf:"bytes,8,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	Interactions     map[string]int32           `protobuf:"bytes,9,rep,name=interactions" json:"interactions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *SightSource) Reset()                    { *m = SightSource{} }
func (m *SightSource) String() string            { return proto.CompactTextString(m) }
func (*SightSource) ProtoMessage()               {}
func (*SightSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SightSource) GetTrackerId() string {
	if m != nil {
		return m.TrackerId
	}
	return ""
}

func (m *SightSource) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *SightSource) GetProfileVendor() string {
	if m != nil {
		return m.ProfileVendor
	}
	return ""
}

func (m *SightSource) GetRequestStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.RequestStartTime
	}
	return nil
}

func (m *SightSource) GetSourceType() SourceType {
	if m != nil {
		return m.SourceType
	}
	return SourceType_Web
}

func (m *SightSource) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *SightSource) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SightSource) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *SightSource) GetInteractions() map[string]int32 {
	if m != nil {
		return m.Interactions
	}
	return nil
}

type Sight struct {
	Time             *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Source           *SightSource               `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Type             SightType                  `protobuf:"varint,3,opt,name=type,enum=pbsights.SightType" json:"type,omitempty"`
	ProfileNamespace string                     `protobuf:"bytes,4,opt,name=profile_namespace,json=profileNamespace" json:"profile_namespace,omitempty"`
	ProfileId        string                     `protobuf:"bytes,5,opt,name=profile_id,json=profileId" json:"profile_id,omitempty"`
	JsonLd           string                     `protobuf:"bytes,6,opt,name=json_ld,json=jsonLd" json:"json_ld,omitempty"`
	Properties       map[string]string          `protobuf:"bytes,7,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Meta             map[string]string          `protobuf:"bytes,8,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Sight) Reset()                    { *m = Sight{} }
func (m *Sight) String() string            { return proto.CompactTextString(m) }
func (*Sight) ProtoMessage()               {}
func (*Sight) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Sight) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Sight) GetSource() *SightSource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Sight) GetType() SightType {
	if m != nil {
		return m.Type
	}
	return SightType_Event
}

func (m *Sight) GetProfileNamespace() string {
	if m != nil {
		return m.ProfileNamespace
	}
	return ""
}

func (m *Sight) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *Sight) GetJsonLd() string {
	if m != nil {
		return m.JsonLd
	}
	return ""
}

func (m *Sight) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Sight) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

type SightResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	SightId string `protobuf:"bytes,2,opt,name=sight_id,json=sightId" json:"sight_id,omitempty"`
}

func (m *SightResponse) Reset()                    { *m = SightResponse{} }
func (m *SightResponse) String() string            { return proto.CompactTextString(m) }
func (*SightResponse) ProtoMessage()               {}
func (*SightResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SightResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SightResponse) GetSightId() string {
	if m != nil {
		return m.SightId
	}
	return ""
}

func init() {
	proto.RegisterType((*SightSource)(nil), "pbsights.SightSource")
	proto.RegisterType((*Sight)(nil), "pbsights.Sight")
	proto.RegisterType((*SightResponse)(nil), "pbsights.SightResponse")
	proto.RegisterEnum("pbsights.SourceType", SourceType_name, SourceType_value)
	proto.RegisterEnum("pbsights.SightType", SightType_name, SightType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sights service

type SightsClient interface {
	Write(ctx context.Context, in *Sight, opts ...grpc.CallOption) (*SightResponse, error)
}

type sightsClient struct {
	cc *grpc.ClientConn
}

func NewSightsClient(cc *grpc.ClientConn) SightsClient {
	return &sightsClient{cc}
}

func (c *sightsClient) Write(ctx context.Context, in *Sight, opts ...grpc.CallOption) (*SightResponse, error) {
	out := new(SightResponse)
	err := grpc.Invoke(ctx, "/pbsights.Sights/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sights service

type SightsServer interface {
	Write(context.Context, *Sight) (*SightResponse, error)
}

func RegisterSightsServer(s *grpc.Server, srv SightsServer) {
	s.RegisterService(&_Sights_serviceDesc, srv)
}

func _Sights_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SightsServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbsights.Sights/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SightsServer).Write(ctx, req.(*Sight))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sights_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbsights.Sights",
	HandlerType: (*SightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _Sights_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sights.proto",
}

func init() { proto.RegisterFile("sights.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 703 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0x71, 0x6b, 0xd3, 0x5e,
	0x14, 0x5d, 0x9a, 0xa6, 0x4d, 0x6e, 0xb7, 0xee, 0xed, 0xfd, 0xf6, 0x63, 0x59, 0x41, 0x56, 0x06,
	0xb2, 0x32, 0x59, 0x8a, 0x15, 0x51, 0x14, 0x19, 0x13, 0xa7, 0x2b, 0x3a, 0x1d, 0xd9, 0xb0, 0x20,
	0x48, 0x49, 0x93, 0xbb, 0x36, 0x2e, 0xcd, 0x8b, 0xef, 0xbd, 0x0e, 0xfa, 0x1d, 0xfd, 0x08, 0x7e,
	0x18, 0x79, 0x2f, 0x49, 0x57, 0xab, 0x30, 0xfc, 0x2f, 0xf7, 0xbc, 0x73, 0x6e, 0xce, 0x3d, 0x37,
	0x2f, 0xb0, 0x2e, 0xe2, 0xf1, 0x44, 0x0a, 0x2f, 0xe3, 0x4c, 0x32, 0x6a, 0x67, 0xa3, 0xbc, 0x6e,
	0xed, 0x8d, 0x19, 0x1b, 0x27, 0xd8, 0xd5, 0xf8, 0x68, 0x76, 0xdd, 0x95, 0xf1, 0x14, 0x85, 0x0c,
	0xa6, 0x59, 0x4e, 0xdd, 0xff, 0x61, 0x42, 0xe3, 0x52, 0x71, 0x2f, 0xd9, 0x8c, 0x87, 0x48, 0x1f,
	0x00, 0x48, 0x1e, 0x84, 0x37, 0xc8, 0x87, 0x71, 0xe4, 0x1a, 0x6d, 0xa3, 0xe3, 0xf8, 0x4e, 0x81,
	0xf4, 0x23, 0x75, 0xcc, 0xf1, 0xfb, 0x0c, 0x85, 0x54, 0xc7, 0x95, 0xfc, 0xb8, 0x40, 0xfa, 0x11,
	0x7d, 0x08, 0xcd, 0x8c, 0xb3, 0xeb, 0x38, 0xc1, 0xe1, 0x2d, 0xa6, 0x11, 0xe3, 0xae, 0xa9, 0x29,
	0x1b, 0x05, 0xfa, 0x59, 0x83, 0xf4, 0x0c, 0x68, 0xd9, 0x45, 0xc8, 0x80, 0xcb, 0xa1, 0x72, 0xe5,
	0x56, 0xdb, 0x46, 0xa7, 0xd1, 0x6b, 0x79, 0xb9, 0x65, 0xaf, 0xb4, 0xec, 0x5d, 0x95, 0x96, 0x7d,
	0x52, 0xa8, 0x2e, 0x95, 0x48, 0xc1, 0xf4, 0x29, 0x34, 0x84, 0x36, 0x3e, 0x94, 0xf3, 0x0c, 0x5d,
	0xab, 0x6d, 0x74, 0x9a, 0xbd, 0x6d, 0xaf, 0x9c, 0xdf, 0xcb, 0xa7, 0xba, 0x9a, 0x67, 0xe8, 0x83,
	0x58, 0x3c, 0xd3, 0x16, 0xd8, 0x13, 0x26, 0x64, 0x1a, 0x4c, 0xd1, 0xad, 0x69, 0x87, 0x8b, 0x9a,
	0x36, 0xa1, 0x12, 0x67, 0x6e, 0x5d, 0xa3, 0x95, 0x38, 0x53, 0x23, 0xcf, 0x04, 0xf2, 0x61, 0x30,
	0xc6, 0x54, 0xba, 0x76, 0x3e, 0xb2, 0x42, 0x4e, 0x14, 0x40, 0xdf, 0xc3, 0x7a, 0x9c, 0x4a, 0xe4,
	0x41, 0x28, 0x63, 0x96, 0x0a, 0xd7, 0x69, 0x9b, 0x9d, 0x46, 0xef, 0x60, 0xc9, 0xc2, 0x5d, 0xba,
	0x5e, 0x7f, 0x89, 0x79, 0x9a, 0x4a, 0x3e, 0xf7, 0x7f, 0x13, 0xb7, 0x8e, 0x61, 0xeb, 0x0f, 0x0a,
	0x25, 0x60, 0xde, 0xe0, 0xbc, 0xd8, 0x85, 0x7a, 0xa4, 0xdb, 0x60, 0xdd, 0x06, 0xc9, 0x0c, 0xf5,
	0x02, 0x2c, 0x3f, 0x2f, 0x5e, 0x54, 0x9e, 0x1b, 0xfb, 0x3f, 0x4d, 0xb0, 0xf4, 0x0b, 0xa9, 0x07,
	0x55, 0x9d, 0xaa, 0x71, 0x6f, 0xaa, 0x9a, 0x47, 0x8f, 0xa0, 0x96, 0x07, 0xa4, 0x9b, 0x36, 0x7a,
	0xff, 0xff, 0x75, 0x02, 0xbf, 0x20, 0xd1, 0x03, 0xa8, 0xea, 0xc4, 0x4d, 0x9d, 0xf8, 0x7f, 0x2b,
	0x64, 0x1d, 0xb8, 0x26, 0xd0, 0x47, 0xb0, 0x55, 0x7e, 0x12, 0x2a, 0x5e, 0x91, 0x05, 0x61, 0xbe,
	0x6a, 0xc7, 0x27, 0xc5, 0xc1, 0xc7, 0x12, 0x57, 0x59, 0x97, 0xe4, 0x38, 0xd2, 0xdb, 0x74, 0x7c,
	0xa7, 0x40, 0xfa, 0x11, 0xdd, 0x81, 0xfa, 0x37, 0xc1, 0xd2, 0x61, 0x12, 0x15, 0x5b, 0xab, 0xa9,
	0xf2, 0x43, 0x44, 0x8f, 0xb5, 0x2e, 0x43, 0x2e, 0x63, 0x14, 0x6e, 0x5d, 0xaf, 0x60, 0x6f, 0xc5,
	0x93, 0x77, 0xb1, 0x60, 0xe4, 0xd1, 0x2f, 0x49, 0xe8, 0x11, 0x54, 0xa7, 0x28, 0x03, 0xd7, 0xd6,
	0xd2, 0xdd, 0x55, 0xe9, 0x39, 0xca, 0x20, 0x17, 0x69, 0x5a, 0xeb, 0x15, 0x6c, 0xae, 0x74, 0xbb,
	0x6f, 0x4b, 0xce, 0xd2, 0x96, 0x5a, 0xcf, 0xc0, 0x59, 0x74, 0xfc, 0x17, 0xe1, 0xfe, 0x1b, 0xd8,
	0xd0, 0x86, 0x7c, 0x14, 0x19, 0x4b, 0x05, 0x52, 0x17, 0xea, 0x62, 0x16, 0x86, 0x28, 0x84, 0x6e,
	0x60, 0xfb, 0x65, 0x49, 0x77, 0xc1, 0xd6, 0x23, 0xdc, 0xdd, 0xd3, 0xba, 0xae, 0xfb, 0xd1, 0xe1,
	0x57, 0x80, 0xbb, 0x7b, 0x41, 0xeb, 0x60, 0x0e, 0x70, 0x44, 0xd6, 0x28, 0x40, 0xed, 0x9c, 0x8d,
	0xe2, 0x04, 0x89, 0xa1, 0xc0, 0x93, 0x8b, 0x3e, 0xa9, 0x50, 0x07, 0xac, 0x8b, 0x09, 0x4b, 0x91,
	0x98, 0xb4, 0x09, 0xe0, 0x63, 0x90, 0x0c, 0x07, 0x8c, 0x27, 0x11, 0xa9, 0xd2, 0x06, 0xd4, 0x07,
	0x38, 0x9a, 0x30, 0x76, 0x43, 0x2c, 0xc5, 0xfb, 0x24, 0x27, 0xc8, 0x49, 0xed, 0xf0, 0x0a, 0x9c,
	0xc5, 0x47, 0xa0, 0xf0, 0xd3, 0x5b, 0x4c, 0x25, 0x59, 0xa3, 0xeb, 0x60, 0x17, 0xa1, 0xcd, 0x89,
	0xa1, 0xd4, 0x67, 0x18, 0xc8, 0x69, 0x90, 0x91, 0x0a, 0xb5, 0xa1, 0xfa, 0x96, 0xf1, 0x29, 0x31,
	0x95, 0x09, 0x1f, 0x93, 0x40, 0x62, 0xfe, 0x82, 0x77, 0x98, 0x22, 0x8f, 0x43, 0x62, 0xf5, 0x5e,
	0x42, 0x4d, 0x77, 0x15, 0xf4, 0x31, 0x58, 0x03, 0x1e, 0x4b, 0xa4, 0x9b, 0x2b, 0x6b, 0x6a, 0xed,
	0xac, 0x00, 0x65, 0x4c, 0xaf, 0x0f, 0xbf, 0x74, 0xc6, 0xb1, 0x9c, 0xcc, 0x46, 0x5e, 0xc8, 0xa6,
	0x5d, 0x7d, 0xe5, 0x72, 0x5e, 0xfe, 0x63, 0x3c, 0x1a, 0xb3, 0x6e, 0xa9, 0x1c, 0xd5, 0x34, 0xf4,
	0xe4, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x43, 0xab, 0xe3, 0x53, 0x05, 0x00, 0x00,
}
