// Code generated by protoc-gen-go. DO NOT EDIT.
// source: application.proto

/*
Package application is a generated protocol buffer package.

It is generated from these files:
	application.proto

It has these top-level messages:
	HTTPRequest
	HTTPResponse
	SocketRequest
	ProjectModifyRequest
	ProjectModifyResponse
*/
package application

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SocketAction int32

const (
	SocketAction_SUBSCRIBE   SocketAction = 0
	SocketAction_UNSUBSCRIBE SocketAction = 1
)

var SocketAction_name = map[int32]string{
	0: "SUBSCRIBE",
	1: "UNSUBSCRIBE",
}
var SocketAction_value = map[string]int32{
	"SUBSCRIBE":   0,
	"UNSUBSCRIBE": 1,
}

func (x SocketAction) String() string {
	return proto.EnumName(SocketAction_name, int32(x))
}
func (SocketAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HTTPRequest_RequestType int32

const (
	HTTPRequest_REQUEST         HTTPRequest_RequestType = 0
	HTTPRequest_WEB_HOOK        HTTPRequest_RequestType = 1
	HTTPRequest_PAGE_DEFINITION HTTPRequest_RequestType = 2
)

var HTTPRequest_RequestType_name = map[int32]string{
	0: "REQUEST",
	1: "WEB_HOOK",
	2: "PAGE_DEFINITION",
}
var HTTPRequest_RequestType_value = map[string]int32{
	"REQUEST":         0,
	"WEB_HOOK":        1,
	"PAGE_DEFINITION": 2,
}

func (x HTTPRequest_RequestType) String() string {
	return proto.EnumName(HTTPRequest_RequestType_name, int32(x))
}
func (HTTPRequest_RequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type ProjectModifyRequest_ModifyMode int32

const (
	ProjectModifyRequest_UNKNOWN    ProjectModifyRequest_ModifyMode = 0
	ProjectModifyRequest_INSTALL    ProjectModifyRequest_ModifyMode = 1
	ProjectModifyRequest_UNINSTALL  ProjectModifyRequest_ModifyMode = 2
	ProjectModifyRequest_SUSPEND    ProjectModifyRequest_ModifyMode = 3
	ProjectModifyRequest_REACTIVATE ProjectModifyRequest_ModifyMode = 4
	ProjectModifyRequest_CANCEL     ProjectModifyRequest_ModifyMode = 5
	ProjectModifyRequest_BILLING    ProjectModifyRequest_ModifyMode = 6
)

var ProjectModifyRequest_ModifyMode_name = map[int32]string{
	0: "UNKNOWN",
	1: "INSTALL",
	2: "UNINSTALL",
	3: "SUSPEND",
	4: "REACTIVATE",
	5: "CANCEL",
	6: "BILLING",
}
var ProjectModifyRequest_ModifyMode_value = map[string]int32{
	"UNKNOWN":    0,
	"INSTALL":    1,
	"UNINSTALL":  2,
	"SUSPEND":    3,
	"REACTIVATE": 4,
	"CANCEL":     5,
	"BILLING":    6,
}

func (x ProjectModifyRequest_ModifyMode) String() string {
	return proto.EnumName(ProjectModifyRequest_ModifyMode_name, int32(x))
}
func (ProjectModifyRequest_ModifyMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

type HTTPRequest struct {
	Path          string                                `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Method        string                                `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	PostParams    map[string]*HTTPRequest_HTTPParameter `protobuf:"bytes,3,rep,name=post_params,json=postParams" json:"post_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	QueryString   string                                `protobuf:"bytes,4,opt,name=query_string,json=queryString" json:"query_string,omitempty"`
	Body          string                                `protobuf:"bytes,5,opt,name=body" json:"body,omitempty"`
	Language      string                                `protobuf:"bytes,6,opt,name=language" json:"language,omitempty"`
	ContentType   string                                `protobuf:"bytes,7,opt,name=content_type,json=contentType" json:"content_type,omitempty"`
	RequestType   HTTPRequest_RequestType               `protobuf:"varint,8,opt,name=request_type,json=requestType,enum=application.HTTPRequest_RequestType" json:"request_type,omitempty"`
	DistributorId string                                `protobuf:"bytes,9,opt,name=distributor_id,json=distributorId" json:"distributor_id,omitempty"`
}

func (m *HTTPRequest) Reset()                    { *m = HTTPRequest{} }
func (m *HTTPRequest) String() string            { return proto.CompactTextString(m) }
func (*HTTPRequest) ProtoMessage()               {}
func (*HTTPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HTTPRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HTTPRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *HTTPRequest) GetPostParams() map[string]*HTTPRequest_HTTPParameter {
	if m != nil {
		return m.PostParams
	}
	return nil
}

func (m *HTTPRequest) GetQueryString() string {
	if m != nil {
		return m.QueryString
	}
	return ""
}

func (m *HTTPRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *HTTPRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *HTTPRequest) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *HTTPRequest) GetRequestType() HTTPRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return HTTPRequest_REQUEST
}

func (m *HTTPRequest) GetDistributorId() string {
	if m != nil {
		return m.DistributorId
	}
	return ""
}

type HTTPRequest_HTTPParameter struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *HTTPRequest_HTTPParameter) Reset()                    { *m = HTTPRequest_HTTPParameter{} }
func (m *HTTPRequest_HTTPParameter) String() string            { return proto.CompactTextString(m) }
func (*HTTPRequest_HTTPParameter) ProtoMessage()               {}
func (*HTTPRequest_HTTPParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *HTTPRequest_HTTPParameter) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type HTTPResponse struct {
	StatusCode  int32                                        `protobuf:"varint,1,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	Body        string                                       `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	ContentType string                                       `protobuf:"bytes,3,opt,name=content_type,json=contentType" json:"content_type,omitempty"`
	Language    string                                       `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
	Headers     map[string]*HTTPResponse_HTTPHeaderParameter `protobuf:"bytes,5,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HTTPResponse) Reset()                    { *m = HTTPResponse{} }
func (m *HTTPResponse) String() string            { return proto.CompactTextString(m) }
func (*HTTPResponse) ProtoMessage()               {}
func (*HTTPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HTTPResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *HTTPResponse) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *HTTPResponse) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *HTTPResponse) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *HTTPResponse) GetHeaders() map[string]*HTTPResponse_HTTPHeaderParameter {
	if m != nil {
		return m.Headers
	}
	return nil
}

type HTTPResponse_HTTPHeaderParameter struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *HTTPResponse_HTTPHeaderParameter) Reset()         { *m = HTTPResponse_HTTPHeaderParameter{} }
func (m *HTTPResponse_HTTPHeaderParameter) String() string { return proto.CompactTextString(m) }
func (*HTTPResponse_HTTPHeaderParameter) ProtoMessage()    {}
func (*HTTPResponse_HTTPHeaderParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

func (m *HTTPResponse_HTTPHeaderParameter) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type SocketRequest struct {
	SocketId      string       `protobuf:"bytes,1,opt,name=socket_id,json=socketId" json:"socket_id,omitempty"`
	Action        SocketAction `protobuf:"varint,2,opt,name=action,enum=application.SocketAction" json:"action,omitempty"`
	Payload       string       `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	DistributorId string       `protobuf:"bytes,4,opt,name=distributor_id,json=distributorId" json:"distributor_id,omitempty"`
}

func (m *SocketRequest) Reset()                    { *m = SocketRequest{} }
func (m *SocketRequest) String() string            { return proto.CompactTextString(m) }
func (*SocketRequest) ProtoMessage()               {}
func (*SocketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SocketRequest) GetSocketId() string {
	if m != nil {
		return m.SocketId
	}
	return ""
}

func (m *SocketRequest) GetAction() SocketAction {
	if m != nil {
		return m.Action
	}
	return SocketAction_SUBSCRIBE
}

func (m *SocketRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *SocketRequest) GetDistributorId() string {
	if m != nil {
		return m.DistributorId
	}
	return ""
}

type ProjectModifyRequest struct {
	ProjectId     string                          `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Mode          ProjectModifyRequest_ModifyMode `protobuf:"varint,2,opt,name=mode,enum=application.ProjectModifyRequest_ModifyMode" json:"mode,omitempty"`
	Data          map[string]string               `protobuf:"bytes,3,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DistributorId string                          `protobuf:"bytes,4,opt,name=distributor_id,json=distributorId" json:"distributor_id,omitempty"`
}

func (m *ProjectModifyRequest) Reset()                    { *m = ProjectModifyRequest{} }
func (m *ProjectModifyRequest) String() string            { return proto.CompactTextString(m) }
func (*ProjectModifyRequest) ProtoMessage()               {}
func (*ProjectModifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ProjectModifyRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ProjectModifyRequest) GetMode() ProjectModifyRequest_ModifyMode {
	if m != nil {
		return m.Mode
	}
	return ProjectModifyRequest_UNKNOWN
}

func (m *ProjectModifyRequest) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ProjectModifyRequest) GetDistributorId() string {
	if m != nil {
		return m.DistributorId
	}
	return ""
}

type ProjectModifyResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ProjectModifyResponse) Reset()                    { *m = ProjectModifyResponse{} }
func (m *ProjectModifyResponse) String() string            { return proto.CompactTextString(m) }
func (*ProjectModifyResponse) ProtoMessage()               {}
func (*ProjectModifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ProjectModifyResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*HTTPRequest)(nil), "application.HTTPRequest")
	proto.RegisterType((*HTTPRequest_HTTPParameter)(nil), "application.HTTPRequest.HTTPParameter")
	proto.RegisterType((*HTTPResponse)(nil), "application.HTTPResponse")
	proto.RegisterType((*HTTPResponse_HTTPHeaderParameter)(nil), "application.HTTPResponse.HTTPHeaderParameter")
	proto.RegisterType((*SocketRequest)(nil), "application.SocketRequest")
	proto.RegisterType((*ProjectModifyRequest)(nil), "application.ProjectModifyRequest")
	proto.RegisterType((*ProjectModifyResponse)(nil), "application.ProjectModifyResponse")
	proto.RegisterEnum("application.SocketAction", SocketAction_name, SocketAction_value)
	proto.RegisterEnum("application.HTTPRequest_RequestType", HTTPRequest_RequestType_name, HTTPRequest_RequestType_value)
	proto.RegisterEnum("application.ProjectModifyRequest_ModifyMode", ProjectModifyRequest_ModifyMode_name, ProjectModifyRequest_ModifyMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Application service

type ApplicationClient interface {
	HandleHTTPRequest(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (*HTTPResponse, error)
	HandleSocketAction(ctx context.Context, in *SocketRequest, opts ...grpc.CallOption) (*HTTPResponse, error)
	ModifyRelationship(ctx context.Context, in *ProjectModifyRequest, opts ...grpc.CallOption) (*ProjectModifyResponse, error)
}

type applicationClient struct {
	cc *grpc.ClientConn
}

func NewApplicationClient(cc *grpc.ClientConn) ApplicationClient {
	return &applicationClient{cc}
}

func (c *applicationClient) HandleHTTPRequest(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (*HTTPResponse, error) {
	out := new(HTTPResponse)
	err := grpc.Invoke(ctx, "/application.Application/HandleHTTPRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) HandleSocketAction(ctx context.Context, in *SocketRequest, opts ...grpc.CallOption) (*HTTPResponse, error) {
	out := new(HTTPResponse)
	err := grpc.Invoke(ctx, "/application.Application/HandleSocketAction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationClient) ModifyRelationship(ctx context.Context, in *ProjectModifyRequest, opts ...grpc.CallOption) (*ProjectModifyResponse, error) {
	out := new(ProjectModifyResponse)
	err := grpc.Invoke(ctx, "/application.Application/ModifyRelationship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Application service

type ApplicationServer interface {
	HandleHTTPRequest(context.Context, *HTTPRequest) (*HTTPResponse, error)
	HandleSocketAction(context.Context, *SocketRequest) (*HTTPResponse, error)
	ModifyRelationship(context.Context, *ProjectModifyRequest) (*ProjectModifyResponse, error)
}

func RegisterApplicationServer(s *grpc.Server, srv ApplicationServer) {
	s.RegisterService(&_Application_serviceDesc, srv)
}

func _Application_HandleHTTPRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).HandleHTTPRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.Application/HandleHTTPRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).HandleHTTPRequest(ctx, req.(*HTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_HandleSocketAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).HandleSocketAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.Application/HandleSocketAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).HandleSocketAction(ctx, req.(*SocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Application_ModifyRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServer).ModifyRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.Application/ModifyRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServer).ModifyRelationship(ctx, req.(*ProjectModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Application_serviceDesc = grpc.ServiceDesc{
	ServiceName: "application.Application",
	HandlerType: (*ApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleHTTPRequest",
			Handler:    _Application_HandleHTTPRequest_Handler,
		},
		{
			MethodName: "HandleSocketAction",
			Handler:    _Application_HandleSocketAction_Handler,
		},
		{
			MethodName: "ModifyRelationship",
			Handler:    _Application_ModifyRelationship_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application.proto",
}

func init() { proto.RegisterFile("application.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 847 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xae, 0xf3, 0x9f, 0xe3, 0xb4, 0xf5, 0xce, 0x2e, 0xc8, 0x1b, 0x84, 0xe8, 0x46, 0x2c, 0x5b,
	0x01, 0x4d, 0xb5, 0xe1, 0x02, 0x84, 0x40, 0x6c, 0x92, 0x9a, 0xc6, 0x6a, 0xd6, 0x0d, 0x4e, 0xc2,
	0x4a, 0x70, 0x11, 0x4d, 0xec, 0x21, 0x31, 0x4d, 0x3d, 0x5e, 0xcf, 0x18, 0xe1, 0x4b, 0x2e, 0x78,
	0x0f, 0x5e, 0x83, 0x97, 0xe1, 0x59, 0xd0, 0xcc, 0x38, 0x8d, 0xd3, 0x4d, 0xb7, 0xbd, 0x8a, 0xcf,
	0xe7, 0x73, 0xbe, 0xf3, 0xcd, 0xf9, 0xce, 0xc4, 0xf0, 0x08, 0x47, 0xd1, 0x2a, 0xf0, 0x30, 0x0f,
	0x68, 0xd8, 0x8e, 0x62, 0xca, 0x29, 0xd2, 0x73, 0x50, 0xeb, 0xdf, 0x12, 0xe8, 0x83, 0xc9, 0x64,
	0xe4, 0x92, 0xb7, 0x09, 0x61, 0x1c, 0x21, 0x28, 0x45, 0x98, 0x2f, 0x4d, 0xed, 0x48, 0x3b, 0xae,
	0xbb, 0xf2, 0x19, 0x7d, 0x08, 0x95, 0x6b, 0xc2, 0x97, 0xd4, 0x37, 0x0b, 0x12, 0xcd, 0x22, 0x64,
	0x83, 0x1e, 0x51, 0xc6, 0x67, 0x11, 0x8e, 0xf1, 0x35, 0x33, 0x8b, 0x47, 0xc5, 0x63, 0xbd, 0x73,
	0xdc, 0xce, 0x77, 0xcc, 0x51, 0xb7, 0x47, 0x94, 0xf1, 0x91, 0x4c, 0xb5, 0x42, 0x1e, 0xa7, 0x2e,
	0x44, 0x37, 0x00, 0x7a, 0x06, 0x8d, 0xb7, 0x09, 0x89, 0xd3, 0x19, 0xe3, 0x71, 0x10, 0x2e, 0xcc,
	0x92, 0x6c, 0xa4, 0x4b, 0x6c, 0x2c, 0x21, 0xa1, 0x6c, 0x4e, 0xfd, 0xd4, 0x2c, 0x2b, 0x65, 0xe2,
	0x19, 0x35, 0xa1, 0xb6, 0xc2, 0xe1, 0x22, 0xc1, 0x0b, 0x62, 0x56, 0x24, 0x7e, 0x13, 0x0b, 0x4a,
	0x8f, 0x86, 0x9c, 0x84, 0x7c, 0xc6, 0xd3, 0x88, 0x98, 0x55, 0x45, 0x99, 0x61, 0x93, 0x34, 0x22,
	0xe8, 0x1c, 0x1a, 0xb1, 0x12, 0xa7, 0x52, 0x6a, 0x47, 0xda, 0xf1, 0x41, 0xe7, 0xd3, 0x3b, 0x4f,
	0x90, 0xfd, 0x8a, 0x5a, 0x57, 0x8f, 0x37, 0x01, 0x7a, 0x0e, 0x07, 0x7e, 0x20, 0xa4, 0xcf, 0x13,
	0x4e, 0xe3, 0x59, 0xe0, 0x9b, 0x75, 0xd9, 0x6d, 0x3f, 0x87, 0xda, 0x7e, 0xf3, 0x05, 0xec, 0x0b,
	0x3a, 0x79, 0x66, 0xc2, 0x49, 0x2c, 0x26, 0xfb, 0x07, 0x5e, 0x25, 0x84, 0x99, 0xda, 0x51, 0x51,
	0x4c, 0x56, 0x45, 0x4d, 0x02, 0x87, 0xb7, 0xa6, 0x85, 0x0c, 0x28, 0x5e, 0x91, 0x34, 0xf3, 0x45,
	0x3c, 0xa2, 0xef, 0xa0, 0x2c, 0xd3, 0xa5, 0x2b, 0x7a, 0xe7, 0xb3, 0x3b, 0x65, 0x6f, 0xf5, 0x74,
	0x55, 0xd1, 0xb7, 0x85, 0x6f, 0xb4, 0xd6, 0xf7, 0xa0, 0xe7, 0x8e, 0x84, 0x74, 0xa8, 0xba, 0xd6,
	0x4f, 0x53, 0x6b, 0x3c, 0x31, 0xf6, 0x50, 0x03, 0x6a, 0x6f, 0xac, 0xde, 0x6c, 0x70, 0x79, 0x79,
	0x61, 0x68, 0xe8, 0x31, 0x1c, 0x8e, 0xba, 0xe7, 0xd6, 0xec, 0xcc, 0xfa, 0xd1, 0x76, 0xec, 0x89,
	0x7d, 0xe9, 0x18, 0x85, 0xd6, 0x7f, 0x05, 0x68, 0xa8, 0x3e, 0x2c, 0xa2, 0x21, 0x23, 0xe8, 0x13,
	0xd0, 0x19, 0xc7, 0x3c, 0x61, 0x33, 0x8f, 0xfa, 0x44, 0x6a, 0x2d, 0xbb, 0xa0, 0xa0, 0x3e, 0xf5,
	0xc9, 0x8d, 0x87, 0x85, 0x9c, 0x87, 0xb7, 0x7d, 0x2a, 0xbe, 0xeb, 0x53, 0xde, 0xe6, 0xd2, 0x2d,
	0x9b, 0x5f, 0x41, 0x75, 0x49, 0xb0, 0x4f, 0x62, 0x66, 0x96, 0xe5, 0x02, 0xee, 0x9a, 0x83, 0xd2,
	0xd7, 0x1e, 0xa8, 0x44, 0xb5, 0x7e, 0xeb, 0xb2, 0xe6, 0x09, 0x3c, 0x16, 0x59, 0xea, 0xe5, 0xfd,
	0xde, 0x04, 0xd0, 0xc8, 0xf3, 0xec, 0x30, 0xa6, 0xbf, 0x6d, 0xcc, 0xc9, 0x7b, 0x04, 0xbd, 0xdb,
	0x37, 0xef, 0xcf, 0x3f, 0x1a, 0xec, 0x8f, 0xa9, 0x77, 0x45, 0xf8, 0xfa, 0x7a, 0x7e, 0x04, 0x75,
	0x26, 0x01, 0xb1, 0x63, 0xaa, 0x65, 0x4d, 0x01, 0xb6, 0x8f, 0x5e, 0x42, 0x05, 0x7b, 0xa2, 0x89,
	0x6c, 0x7c, 0xd0, 0x79, 0xba, 0xd5, 0x58, 0x11, 0x75, 0x65, 0x82, 0x9b, 0x25, 0x22, 0x13, 0xaa,
	0x11, 0x4e, 0x57, 0x14, 0xfb, 0xd9, 0xdc, 0xd7, 0xe1, 0x8e, 0x95, 0x2e, 0xed, 0x58, 0xe9, 0xd6,
	0xdf, 0x45, 0x78, 0x32, 0x8a, 0xe9, 0xef, 0xc4, 0xe3, 0xaf, 0xa9, 0x1f, 0xfc, 0x96, 0xae, 0x95,
	0x7e, 0x0c, 0x10, 0x29, 0x7c, 0x23, 0xb5, 0x9e, 0x21, 0xb6, 0x8f, 0x5e, 0x41, 0xe9, 0x5a, 0xec,
	0x88, 0x52, 0xfa, 0xe5, 0x96, 0xd2, 0x5d, 0x7c, 0x6d, 0x15, 0xbd, 0xa6, 0x3e, 0x71, 0x65, 0x25,
	0xfa, 0x01, 0x4a, 0x3e, 0xe6, 0x38, 0xfb, 0xdb, 0xf9, 0xe2, 0x7e, 0x86, 0x33, 0xcc, 0xb1, 0xb2,
	0x5e, 0x16, 0x3e, 0xf0, 0x84, 0xcd, 0xaf, 0xa1, 0x7e, 0x53, 0xb9, 0xc3, 0xec, 0x27, 0x79, 0xb3,
	0xeb, 0x79, 0xf7, 0xae, 0x00, 0x36, 0xa2, 0xc5, 0xe5, 0x9a, 0x3a, 0x17, 0xce, 0xe5, 0x1b, 0xc7,
	0xd8, 0x13, 0x81, 0xed, 0x8c, 0x27, 0xdd, 0xe1, 0xd0, 0xd0, 0xd0, 0x3e, 0xd4, 0xa7, 0xce, 0x3a,
	0x2c, 0x88, 0x77, 0xe3, 0xe9, 0x78, 0x64, 0x39, 0x67, 0x46, 0x11, 0x1d, 0x00, 0xb8, 0x56, 0xb7,
	0x3f, 0xb1, 0x7f, 0xee, 0x4e, 0x2c, 0xa3, 0x84, 0x00, 0x2a, 0xfd, 0xae, 0xd3, 0xb7, 0x86, 0x46,
	0x59, 0x24, 0xf6, 0xec, 0xe1, 0xd0, 0x76, 0xce, 0x8d, 0x4a, 0xeb, 0x25, 0x7c, 0x70, 0xeb, 0xd0,
	0xd9, 0x9d, 0x34, 0xa1, 0xca, 0x12, 0xcf, 0x23, 0x8c, 0x49, 0xd5, 0x35, 0x77, 0x1d, 0x7e, 0xde,
	0x86, 0x46, 0x7e, 0x27, 0x84, 0x8e, 0xf1, 0xb4, 0x37, 0xee, 0xbb, 0x76, 0xcf, 0x32, 0xf6, 0xd0,
	0x21, 0xe8, 0x53, 0x67, 0x03, 0x68, 0x9d, 0xbf, 0x0a, 0xa0, 0x77, 0x37, 0x43, 0x46, 0x03, 0x78,
	0x34, 0xc0, 0xa1, 0xbf, 0x22, 0xf9, 0xef, 0x87, 0x79, 0xd7, 0xbf, 0x50, 0xf3, 0xe9, 0x9d, 0xd7,
	0x00, 0x5d, 0x00, 0x52, 0x4c, 0x5b, 0x7a, 0x9a, 0x3b, 0xd6, 0xf7, 0x01, 0x64, 0xbf, 0x02, 0x5a,
	0x8f, 0x60, 0x25, 0x5f, 0xb3, 0x65, 0x10, 0xa1, 0x67, 0xf7, 0xee, 0x47, 0xb3, 0xf5, 0xbe, 0x14,
	0x45, 0xde, 0x7b, 0xf1, 0xcb, 0xf3, 0x45, 0xc0, 0x97, 0xc9, 0xbc, 0xed, 0xd1, 0xeb, 0xd3, 0xab,
	0x64, 0x4e, 0xfe, 0x3c, 0x95, 0x5f, 0xd5, 0x93, 0x05, 0x3d, 0xcd, 0x95, 0xcf, 0x2b, 0x12, 0xfd,
	0xea, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xd3, 0x26, 0x73, 0x80, 0x07, 0x00, 0x00,
}
