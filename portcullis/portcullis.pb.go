// Code generated by protoc-gen-go. DO NOT EDIT.
// source: portcullis.proto

/*
Package portcullis is a generated protocol buffer package.

It is generated from these files:
	portcullis.proto

It has these top-level messages:
	CreateRoleRequest
	CompleteResponse
	RoleUsersRequest
	Permission
	SetPermissionRequest
	GetPermissionRequest
	GetPermissionsResponse
*/
package portcullis

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PermissionType int32

const (
	PermissionType_NONE  PermissionType = 0
	PermissionType_ALLOW PermissionType = 1
	PermissionType_DENY  PermissionType = 2
	// Can be used on apps only, but will take permission from the requesting user
	PermissionType_INHERIT PermissionType = 3
)

var PermissionType_name = map[int32]string{
	0: "NONE",
	1: "ALLOW",
	2: "DENY",
	3: "INHERIT",
}
var PermissionType_value = map[string]int32{
	"NONE":    0,
	"ALLOW":   1,
	"DENY":    2,
	"INHERIT": 3,
}

func (x PermissionType) String() string {
	return proto.EnumName(PermissionType_name, int32(x))
}
func (PermissionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateRoleRequest struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *CreateRoleRequest) Reset()                    { *m = CreateRoleRequest{} }
func (m *CreateRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRoleRequest) ProtoMessage()               {}
func (*CreateRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRoleRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateRoleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CompleteResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *CompleteResponse) Reset()                    { *m = CompleteResponse{} }
func (m *CompleteResponse) String() string            { return proto.CompactTextString(m) }
func (*CompleteResponse) ProtoMessage()               {}
func (*CompleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CompleteResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CompleteResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RoleUsersRequest struct {
	RoleId  string   `protobuf:"bytes,1,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
}

func (m *RoleUsersRequest) Reset()                    { *m = RoleUsersRequest{} }
func (m *RoleUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*RoleUsersRequest) ProtoMessage()               {}
func (*RoleUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RoleUsersRequest) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *RoleUsersRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type Permission struct {
	Id   string         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type PermissionType `protobuf:"varint,2,opt,name=type,enum=portcullis.PermissionType" json:"type,omitempty"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (m *Permission) String() string            { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Permission) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Permission) GetType() PermissionType {
	if m != nil {
		return m.Type
	}
	return PermissionType_NONE
}

type SetPermissionRequest struct {
	ApplyToIds  []string      `protobuf:"bytes,1,rep,name=apply_to_ids,json=applyToIds" json:"apply_to_ids,omitempty"`
	Permissions []*Permission `protobuf:"bytes,2,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *SetPermissionRequest) Reset()                    { *m = SetPermissionRequest{} }
func (m *SetPermissionRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPermissionRequest) ProtoMessage()               {}
func (*SetPermissionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SetPermissionRequest) GetApplyToIds() []string {
	if m != nil {
		return m.ApplyToIds
	}
	return nil
}

func (m *SetPermissionRequest) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type GetPermissionRequest struct {
	UserId      string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	SourceAppId string `protobuf:"bytes,2,opt,name=source_app_id,json=sourceAppId" json:"source_app_id,omitempty"`
	// Include prefixes to search for e.g. projectID/ projectID/Kubex projectID/kubex/teams
	Prefixes           []string `protobuf:"bytes,3,rep,name=prefixes" json:"prefixes,omitempty"`
	IncludeRoles       bool     `protobuf:"varint,4,opt,name=include_roles,json=includeRoles" json:"include_roles,omitempty"`
	IncludePermissions bool     `protobuf:"varint,5,opt,name=include_permissions,json=includePermissions" json:"include_permissions,omitempty"`
}

func (m *GetPermissionRequest) Reset()                    { *m = GetPermissionRequest{} }
func (m *GetPermissionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPermissionRequest) ProtoMessage()               {}
func (*GetPermissionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetPermissionRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GetPermissionRequest) GetSourceAppId() string {
	if m != nil {
		return m.SourceAppId
	}
	return ""
}

func (m *GetPermissionRequest) GetPrefixes() []string {
	if m != nil {
		return m.Prefixes
	}
	return nil
}

func (m *GetPermissionRequest) GetIncludeRoles() bool {
	if m != nil {
		return m.IncludeRoles
	}
	return false
}

func (m *GetPermissionRequest) GetIncludePermissions() bool {
	if m != nil {
		return m.IncludePermissions
	}
	return false
}

type GetPermissionsResponse struct {
	Roles       []string      `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
	Permissions []*Permission `protobuf:"bytes,2,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *GetPermissionsResponse) Reset()                    { *m = GetPermissionsResponse{} }
func (m *GetPermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPermissionsResponse) ProtoMessage()               {}
func (*GetPermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetPermissionsResponse) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *GetPermissionsResponse) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRoleRequest)(nil), "portcullis.CreateRoleRequest")
	proto.RegisterType((*CompleteResponse)(nil), "portcullis.CompleteResponse")
	proto.RegisterType((*RoleUsersRequest)(nil), "portcullis.RoleUsersRequest")
	proto.RegisterType((*Permission)(nil), "portcullis.Permission")
	proto.RegisterType((*SetPermissionRequest)(nil), "portcullis.SetPermissionRequest")
	proto.RegisterType((*GetPermissionRequest)(nil), "portcullis.GetPermissionRequest")
	proto.RegisterType((*GetPermissionsResponse)(nil), "portcullis.GetPermissionsResponse")
	proto.RegisterEnum("portcullis.PermissionType", PermissionType_name, PermissionType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Portcullis service

type PortcullisClient interface {
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CompleteResponse, error)
	AddToRole(ctx context.Context, in *RoleUsersRequest, opts ...grpc.CallOption) (*CompleteResponse, error)
	RemoveFromRole(ctx context.Context, in *RoleUsersRequest, opts ...grpc.CallOption) (*CompleteResponse, error)
	SetPermissions(ctx context.Context, in *SetPermissionRequest, opts ...grpc.CallOption) (*CompleteResponse, error)
	GetPermissions(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error)
}

type portcullisClient struct {
	cc *grpc.ClientConn
}

func NewPortcullisClient(cc *grpc.ClientConn) PortcullisClient {
	return &portcullisClient{cc}
}

func (c *portcullisClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CompleteResponse, error) {
	out := new(CompleteResponse)
	err := grpc.Invoke(ctx, "/portcullis.Portcullis/CreateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portcullisClient) AddToRole(ctx context.Context, in *RoleUsersRequest, opts ...grpc.CallOption) (*CompleteResponse, error) {
	out := new(CompleteResponse)
	err := grpc.Invoke(ctx, "/portcullis.Portcullis/AddToRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portcullisClient) RemoveFromRole(ctx context.Context, in *RoleUsersRequest, opts ...grpc.CallOption) (*CompleteResponse, error) {
	out := new(CompleteResponse)
	err := grpc.Invoke(ctx, "/portcullis.Portcullis/RemoveFromRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portcullisClient) SetPermissions(ctx context.Context, in *SetPermissionRequest, opts ...grpc.CallOption) (*CompleteResponse, error) {
	out := new(CompleteResponse)
	err := grpc.Invoke(ctx, "/portcullis.Portcullis/SetPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portcullisClient) GetPermissions(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error) {
	out := new(GetPermissionsResponse)
	err := grpc.Invoke(ctx, "/portcullis.Portcullis/GetPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Portcullis service

type PortcullisServer interface {
	CreateRole(context.Context, *CreateRoleRequest) (*CompleteResponse, error)
	AddToRole(context.Context, *RoleUsersRequest) (*CompleteResponse, error)
	RemoveFromRole(context.Context, *RoleUsersRequest) (*CompleteResponse, error)
	SetPermissions(context.Context, *SetPermissionRequest) (*CompleteResponse, error)
	GetPermissions(context.Context, *GetPermissionRequest) (*GetPermissionsResponse, error)
}

func RegisterPortcullisServer(s *grpc.Server, srv PortcullisServer) {
	s.RegisterService(&_Portcullis_serviceDesc, srv)
}

func _Portcullis_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortcullisServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portcullis.Portcullis/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortcullisServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portcullis_AddToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortcullisServer).AddToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portcullis.Portcullis/AddToRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortcullisServer).AddToRole(ctx, req.(*RoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portcullis_RemoveFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortcullisServer).RemoveFromRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portcullis.Portcullis/RemoveFromRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortcullisServer).RemoveFromRole(ctx, req.(*RoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portcullis_SetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortcullisServer).SetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portcullis.Portcullis/SetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortcullisServer).SetPermissions(ctx, req.(*SetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Portcullis_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortcullisServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/portcullis.Portcullis/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortcullisServer).GetPermissions(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Portcullis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portcullis.Portcullis",
	HandlerType: (*PortcullisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _Portcullis_CreateRole_Handler,
		},
		{
			MethodName: "AddToRole",
			Handler:    _Portcullis_AddToRole_Handler,
		},
		{
			MethodName: "RemoveFromRole",
			Handler:    _Portcullis_RemoveFromRole_Handler,
		},
		{
			MethodName: "SetPermissions",
			Handler:    _Portcullis_SetPermissions_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _Portcullis_GetPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portcullis.proto",
}

func init() { proto.RegisterFile("portcullis.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x25, 0x5f, 0x4d, 0x32, 0x69, 0x2d, 0xb3, 0x44, 0xad, 0x89, 0x40, 0x8a, 0x0c, 0x42, 0x15,
	0x12, 0x89, 0x54, 0x0e, 0x70, 0xe0, 0x92, 0x96, 0x34, 0x58, 0x8a, 0xd2, 0xc8, 0x04, 0x10, 0x5c,
	0xa2, 0xc4, 0x3b, 0xb4, 0x16, 0x76, 0x76, 0xd9, 0xb1, 0x51, 0xf3, 0x4f, 0xf8, 0x43, 0xfc, 0x2f,
	0xe4, 0x75, 0xe2, 0x38, 0x6d, 0xa0, 0x12, 0xdc, 0x3c, 0x6f, 0xdf, 0xcc, 0x7b, 0x33, 0x3b, 0x6b,
	0x30, 0xa5, 0x50, 0x91, 0x17, 0x07, 0x81, 0x4f, 0x1d, 0xa9, 0x44, 0x24, 0x18, 0x6c, 0x10, 0xfb,
	0x15, 0xdc, 0x3f, 0x53, 0x38, 0x8b, 0xd0, 0x15, 0x01, 0xba, 0xf8, 0x3d, 0x46, 0x8a, 0x98, 0x01,
	0x45, 0x9f, 0x5b, 0x85, 0x76, 0xe1, 0xb8, 0xee, 0x16, 0x7d, 0xce, 0x18, 0x94, 0x17, 0xb3, 0x10,
	0xad, 0xa2, 0x46, 0xf4, 0xb7, 0x7d, 0x0a, 0xe6, 0x99, 0x08, 0x65, 0x80, 0x11, 0xba, 0x48, 0x52,
	0x2c, 0x08, 0x99, 0x05, 0x55, 0x8a, 0x3d, 0x0f, 0x89, 0x74, 0x72, 0xcd, 0x5d, 0x87, 0xac, 0x09,
	0x15, 0x54, 0x4a, 0xa8, 0x55, 0x89, 0x34, 0xb0, 0xcf, 0xc1, 0x4c, 0x64, 0x3f, 0x10, 0x2a, 0x5a,
	0x6b, 0x1f, 0x41, 0x55, 0x89, 0x00, 0xa7, 0x99, 0x81, 0xbd, 0x24, 0x74, 0x38, 0x7b, 0x08, 0xb5,
	0x98, 0x50, 0x4d, 0x7d, 0x4e, 0x56, 0xb1, 0x5d, 0x3a, 0xae, 0xbb, 0xd5, 0x24, 0x76, 0x38, 0xd9,
	0x43, 0x80, 0x31, 0xaa, 0xd0, 0x27, 0xf2, 0xc5, 0xe2, 0x96, 0xfb, 0x0e, 0x94, 0xa3, 0xa5, 0x4c,
	0xdd, 0x1b, 0x27, 0xad, 0x4e, 0x6e, 0x1e, 0x9b, 0xac, 0xc9, 0x52, 0xa2, 0xab, 0x79, 0xb6, 0x82,
	0xe6, 0x7b, 0x8c, 0x36, 0x47, 0x6b, 0x67, 0x6d, 0xd8, 0x9f, 0x49, 0x19, 0x2c, 0xa7, 0x91, 0xd0,
	0x26, 0x0a, 0xda, 0x04, 0x68, 0x6c, 0x22, 0x1c, 0x4e, 0xec, 0x35, 0x34, 0x64, 0x96, 0x96, 0xba,
	0x6c, 0x9c, 0x1c, 0xee, 0x16, 0x74, 0xf3, 0x54, 0xfb, 0x57, 0x01, 0x9a, 0x83, 0x5d, 0xa2, 0x47,
	0x50, 0x5d, 0x75, 0xbd, 0x1e, 0x47, 0xda, 0x34, 0xb3, 0xe1, 0x80, 0x44, 0xac, 0x3c, 0x9c, 0xce,
	0xa4, 0x4c, 0x8e, 0xd3, 0xc9, 0x36, 0x52, 0xb0, 0x27, 0xa5, 0xc3, 0x59, 0x0b, 0x6a, 0x52, 0xe1,
	0x57, 0xff, 0x1a, 0xc9, 0x2a, 0x69, 0xb7, 0x59, 0xcc, 0x9e, 0xc0, 0x81, 0xbf, 0xf0, 0x82, 0x98,
	0xe3, 0x34, 0x19, 0x30, 0x59, 0x65, 0x7d, 0x63, 0xfb, 0x2b, 0x30, 0xb9, 0x17, 0x62, 0x5d, 0x78,
	0xb0, 0x26, 0xe5, 0x1b, 0xab, 0x68, 0x2a, 0x5b, 0x1d, 0x8d, 0x73, 0x7d, 0x5c, 0xc1, 0xe1, 0x56,
	0x1b, 0x94, 0xed, 0x46, 0x13, 0x2a, 0xa9, 0x4e, 0x3a, 0xb6, 0x34, 0xf8, 0xf7, 0x89, 0x3d, 0x7f,
	0x03, 0xc6, 0xf6, 0xed, 0xb1, 0x1a, 0x94, 0x47, 0x17, 0xa3, 0xbe, 0x79, 0x8f, 0xd5, 0xa1, 0xd2,
	0x1b, 0x0e, 0x2f, 0x3e, 0x99, 0x85, 0x04, 0x7c, 0xdb, 0x1f, 0x7d, 0x36, 0x8b, 0xac, 0x01, 0x55,
	0x67, 0xf4, 0xae, 0xef, 0x3a, 0x13, 0xb3, 0x74, 0xf2, 0xb3, 0x04, 0x30, 0xce, 0x44, 0x98, 0x03,
	0xb0, 0x79, 0x05, 0xec, 0x71, 0x5e, 0xff, 0xd6, 0xeb, 0x68, 0x3d, 0xda, 0x3a, 0xbe, 0xf9, 0x06,
	0x06, 0x50, 0xef, 0x71, 0x3e, 0x11, 0xba, 0xd2, 0x16, 0xf5, 0xe6, 0xaa, 0xdf, 0x51, 0x68, 0x08,
	0x86, 0x8b, 0xa1, 0xf8, 0x81, 0xe7, 0x4a, 0x84, 0xff, 0x5d, 0x6d, 0x0c, 0xc6, 0xd6, 0x52, 0x13,
	0x6b, 0xe7, 0xf9, 0xbb, 0x16, 0xfe, 0x8e, 0x8a, 0x1f, 0xc1, 0x18, 0xfc, 0xa5, 0xe2, 0xae, 0x6d,
	0x6e, 0xd9, 0x7f, 0x64, 0x64, 0x8b, 0x72, 0xfa, 0xec, 0xcb, 0xd3, 0x4b, 0x3f, 0xba, 0x8a, 0xe7,
	0x1d, 0x4f, 0x84, 0xdd, 0x6f, 0xf1, 0x1c, 0xaf, 0xbb, 0xfa, 0xbf, 0xf5, 0xe2, 0x52, 0x74, 0x37,
	0xe9, 0xf3, 0x3d, 0x0d, 0xbe, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xe2, 0x63, 0x71, 0xe0,
	0x04, 0x00, 0x00,
}
