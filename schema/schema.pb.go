// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema.proto

/*
Package schema is a generated protocol buffer package.

It is generated from these files:
	schema.proto

It has these top-level messages:
	SchemaKey
	Definition
	Attribute
*/
package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SchemaKey_Type int32

const (
	SchemaKey_entity SchemaKey_Type = 0
	SchemaKey_event  SchemaKey_Type = 1
)

var SchemaKey_Type_name = map[int32]string{
	0: "entity",
	1: "event",
}
var SchemaKey_Type_value = map[string]int32{
	"entity": 0,
	"event":  1,
}

func (x SchemaKey_Type) String() string {
	return proto.EnumName(SchemaKey_Type_name, int32(x))
}
func (SchemaKey_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Attribute_Type int32

const (
	Attribute_string    Attribute_Type = 0
	Attribute_integer   Attribute_Type = 1
	Attribute_long      Attribute_Type = 2
	Attribute_float     Attribute_Type = 3
	Attribute_double    Attribute_Type = 4
	Attribute_boolean   Attribute_Type = 5
	Attribute_bytes     Attribute_Type = 6
	Attribute_date      Attribute_Type = 7
	Attribute_datetime  Attribute_Type = 8
	Attribute_timestamp Attribute_Type = 9
	Attribute_list      Attribute_Type = 10
	Attribute_password  Attribute_Type = 11
	Attribute_json      Attribute_Type = 12
)

var Attribute_Type_name = map[int32]string{
	0:  "string",
	1:  "integer",
	2:  "long",
	3:  "float",
	4:  "double",
	5:  "boolean",
	6:  "bytes",
	7:  "date",
	8:  "datetime",
	9:  "timestamp",
	10: "list",
	11: "password",
	12: "json",
}
var Attribute_Type_value = map[string]int32{
	"string":    0,
	"integer":   1,
	"long":      2,
	"float":     3,
	"double":    4,
	"boolean":   5,
	"bytes":     6,
	"date":      7,
	"datetime":  8,
	"timestamp": 9,
	"list":      10,
	"password":  11,
	"json":      12,
}

func (x Attribute_Type) String() string {
	return proto.EnumName(Attribute_Type_name, int32(x))
}
func (Attribute_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type SchemaKey struct {
	VendorId string         `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	AppId    string         `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SchemaId string         `protobuf:"bytes,3,opt,name=schema_id,json=schemaId" json:"schema_id,omitempty"`
	Version  int32          `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	Type     SchemaKey_Type `protobuf:"varint,5,opt,name=type,enum=schema.SchemaKey_Type" json:"type,omitempty"`
}

func (m *SchemaKey) Reset()                    { *m = SchemaKey{} }
func (m *SchemaKey) String() string            { return proto.CompactTextString(m) }
func (*SchemaKey) ProtoMessage()               {}
func (*SchemaKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SchemaKey) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *SchemaKey) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *SchemaKey) GetSchemaId() string {
	if m != nil {
		return m.SchemaId
	}
	return ""
}

func (m *SchemaKey) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *SchemaKey) GetType() SchemaKey_Type {
	if m != nil {
		return m.Type
	}
	return SchemaKey_entity
}

type Definition struct {
	Key         *SchemaKey            `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Attributes  map[string]*Attribute `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name        string                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description string                `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

func (m *Definition) Reset()                    { *m = Definition{} }
func (m *Definition) String() string            { return proto.CompactTextString(m) }
func (*Definition) ProtoMessage()               {}
func (*Definition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Definition) GetKey() *SchemaKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Definition) GetAttributes() map[string]*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Definition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Definition) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Attribute struct {
	Key          string         `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Type         Attribute_Type `protobuf:"varint,2,opt,name=type,enum=schema.Attribute_Type" json:"type,omitempty"`
	Name         string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description  string         `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Required     bool           `protobuf:"varint,5,opt,name=required" json:"required,omitempty"`
	ValidOptions []string       `protobuf:"bytes,6,rep,name=valid_options,json=validOptions" json:"valid_options,omitempty"`
}

func (m *Attribute) Reset()                    { *m = Attribute{} }
func (m *Attribute) String() string            { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()               {}
func (*Attribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Attribute) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Attribute) GetType() Attribute_Type {
	if m != nil {
		return m.Type
	}
	return Attribute_string
}

func (m *Attribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Attribute) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Attribute) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *Attribute) GetValidOptions() []string {
	if m != nil {
		return m.ValidOptions
	}
	return nil
}

func init() {
	proto.RegisterType((*SchemaKey)(nil), "schema.SchemaKey")
	proto.RegisterType((*Definition)(nil), "schema.Definition")
	proto.RegisterType((*Attribute)(nil), "schema.Attribute")
	proto.RegisterEnum("schema.SchemaKey_Type", SchemaKey_Type_name, SchemaKey_Type_value)
	proto.RegisterEnum("schema.Attribute_Type", Attribute_Type_name, Attribute_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Schema service

type SchemaClient interface {
	Retrieve(ctx context.Context, in *SchemaKey, opts ...grpc.CallOption) (*Definition, error)
	Create(ctx context.Context, in *Definition, opts ...grpc.CallOption) (*Definition, error)
}

type schemaClient struct {
	cc *grpc.ClientConn
}

func NewSchemaClient(cc *grpc.ClientConn) SchemaClient {
	return &schemaClient{cc}
}

func (c *schemaClient) Retrieve(ctx context.Context, in *SchemaKey, opts ...grpc.CallOption) (*Definition, error) {
	out := new(Definition)
	err := grpc.Invoke(ctx, "/schema.Schema/Retrieve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaClient) Create(ctx context.Context, in *Definition, opts ...grpc.CallOption) (*Definition, error) {
	out := new(Definition)
	err := grpc.Invoke(ctx, "/schema.Schema/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Schema service

type SchemaServer interface {
	Retrieve(context.Context, *SchemaKey) (*Definition, error)
	Create(context.Context, *Definition) (*Definition, error)
}

func RegisterSchemaServer(s *grpc.Server, srv SchemaServer) {
	s.RegisterService(&_Schema_serviceDesc, srv)
}

func _Schema_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Schema/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).Retrieve(ctx, req.(*SchemaKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schema_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Definition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Schema/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).Create(ctx, req.(*Definition))
	}
	return interceptor(ctx, in, info, handler)
}

var _Schema_serviceDesc = grpc.ServiceDesc{
	ServiceName: "schema.Schema",
	HandlerType: (*SchemaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Retrieve",
			Handler:    _Schema_Retrieve_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Schema_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}

func init() { proto.RegisterFile("schema.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcf, 0x6e, 0xd4, 0x3c,
	0x10, 0x6f, 0x76, 0x93, 0x34, 0x99, 0xdd, 0x7e, 0x9f, 0xb1, 0x04, 0x8a, 0x8a, 0x90, 0xa2, 0xf4,
	0xc0, 0x0a, 0x89, 0x2d, 0x2c, 0x17, 0xc4, 0x8d, 0x02, 0x87, 0x8a, 0x03, 0x28, 0x70, 0xe2, 0x52,
	0x39, 0xcd, 0x74, 0x6b, 0x9a, 0xd8, 0xc1, 0x76, 0x02, 0x79, 0x1c, 0x1e, 0x85, 0x77, 0xe1, 0x35,
	0x90, 0x90, 0x9d, 0x6e, 0xba, 0xd0, 0x3d, 0x71, 0x9b, 0xf9, 0xfd, 0xd3, 0xcc, 0xc4, 0x81, 0xb9,
	0x3e, 0xbf, 0xc4, 0x9a, 0x2d, 0x1b, 0x25, 0x8d, 0xa4, 0xe1, 0xd0, 0x65, 0x3f, 0x3c, 0x88, 0x3f,
	0xb8, 0xf2, 0x2d, 0xf6, 0xf4, 0x3e, 0xc4, 0x1d, 0x8a, 0x52, 0xaa, 0x33, 0x5e, 0x26, 0x5e, 0xea,
	0x2d, 0xe2, 0x3c, 0x1a, 0x80, 0xd3, 0x92, 0xde, 0x85, 0x90, 0x35, 0x8d, 0x65, 0x26, 0x8e, 0x09,
	0x58, 0xd3, 0x9c, 0x96, 0xd6, 0x33, 0x64, 0x59, 0x66, 0x3a, 0x78, 0x06, 0xe0, 0xb4, 0xa4, 0x09,
	0xec, 0x77, 0xa8, 0x34, 0x97, 0x22, 0xf1, 0x53, 0x6f, 0x11, 0xe4, 0x9b, 0x96, 0x3e, 0x02, 0xdf,
	0xf4, 0x0d, 0x26, 0x41, 0xea, 0x2d, 0xfe, 0x5b, 0xdd, 0x5b, 0x5e, 0x4f, 0x37, 0xce, 0xb2, 0xfc,
	0xd8, 0x37, 0x98, 0x3b, 0x4d, 0xf6, 0x00, 0x7c, 0xdb, 0x51, 0x80, 0x10, 0x85, 0xe1, 0xa6, 0x27,
	0x7b, 0x34, 0x86, 0x00, 0x3b, 0x14, 0x86, 0x78, 0xd9, 0x2f, 0x0f, 0xe0, 0x35, 0x5e, 0x70, 0xc1,
	0x8d, 0x4d, 0x3e, 0x82, 0xe9, 0x15, 0xf6, 0x6e, 0xfc, 0xd9, 0xea, 0xce, 0xad, 0xe0, 0xdc, 0xb2,
	0xf4, 0x04, 0x80, 0x19, 0xa3, 0x78, 0xd1, 0x1a, 0xd4, 0xc9, 0x24, 0x9d, 0x2e, 0x66, 0xab, 0x6c,
	0xa3, 0xbd, 0x09, 0x5b, 0xbe, 0x1c, 0x45, 0x6f, 0x84, 0x51, 0x7d, 0xbe, 0xe5, 0xa2, 0x14, 0x7c,
	0xc1, 0x6a, 0xbc, 0x5e, 0xda, 0xd5, 0x34, 0x85, 0x59, 0x89, 0xfa, 0x5c, 0xf1, 0xc6, 0x6c, 0x96,
	0x8e, 0xf3, 0x6d, 0xe8, 0xf0, 0x3d, 0xfc, 0xff, 0x57, 0x28, 0x25, 0x37, 0x13, 0xc7, 0xc3, 0x78,
	0x0f, 0x21, 0xe8, 0x58, 0xd5, 0xa2, 0x3b, 0xf5, 0xd6, 0x16, 0xa3, 0x33, 0x1f, 0xf8, 0x17, 0x93,
	0xe7, 0x5e, 0xf6, 0x73, 0x02, 0xf1, 0x48, 0xec, 0x08, 0xdb, 0x9c, 0x7a, 0xf2, 0xe7, 0xa9, 0x47,
	0xcb, 0xd6, 0xa9, 0xff, 0x6d, 0x27, 0x7a, 0x08, 0x91, 0xc2, 0x2f, 0x2d, 0x57, 0x58, 0xba, 0x0f,
	0x1a, 0xe5, 0x63, 0x4f, 0x8f, 0xe0, 0xa0, 0x63, 0x15, 0x2f, 0xcf, 0xa4, 0xd3, 0xea, 0x24, 0x4c,
	0xa7, 0x8b, 0x38, 0x9f, 0x3b, 0xf0, 0xdd, 0x80, 0x65, 0xdf, 0xbd, 0x9b, 0x4f, 0xac, 0x8d, 0xe2,
	0x62, 0x4d, 0xf6, 0xe8, 0x0c, 0xf6, 0xb9, 0x30, 0xb8, 0x46, 0x45, 0x3c, 0x1a, 0x81, 0x5f, 0x49,
	0xb1, 0x26, 0x13, 0xfb, 0xe5, 0x2f, 0x2a, 0xc9, 0x0c, 0x99, 0x5a, 0x75, 0x29, 0xdb, 0xa2, 0x42,
	0xe2, 0x5b, 0x75, 0x21, 0x65, 0x85, 0x4c, 0x90, 0xc0, 0x6a, 0x8a, 0xde, 0xa0, 0x26, 0xa1, 0x35,
	0x96, 0xcc, 0x20, 0xd9, 0xa7, 0x73, 0x88, 0x6c, 0x65, 0x78, 0x8d, 0x24, 0xa2, 0x07, 0x10, 0xdb,
	0x4a, 0x1b, 0x56, 0x37, 0x24, 0x76, 0xf9, 0x5c, 0x1b, 0x02, 0x56, 0xd6, 0x30, 0xad, 0xbf, 0x4a,
	0x55, 0x92, 0x99, 0xc5, 0x3f, 0x6b, 0x29, 0xc8, 0x7c, 0x55, 0x43, 0x38, 0x3c, 0x22, 0xfa, 0x14,
	0xa2, 0x1c, 0x8d, 0xe2, 0xd8, 0x21, 0xbd, 0xfd, 0xc0, 0x0e, 0xe9, 0xed, 0x77, 0x44, 0x9f, 0x40,
	0xf8, 0x4a, 0x21, 0x33, 0x48, 0x77, 0xb0, 0xbb, 0x1c, 0x27, 0xd9, 0xa7, 0x74, 0xcd, 0xcd, 0x65,
	0x5b, 0x2c, 0xcf, 0x65, 0x7d, 0x7c, 0xd5, 0x16, 0xf8, 0xed, 0xd8, 0xfd, 0xbb, 0x8f, 0xd7, 0xf2,
	0x78, 0x90, 0x17, 0xa1, 0x03, 0x9e, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x40, 0xa3, 0xec, 0x93,
	0xdc, 0x03, 0x00, 0x00,
}
