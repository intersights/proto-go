// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

/*
Package registry is a generated protocol buffer package.

Where Projects/Users get hitched to apps

It is generated from these files:
	registry.proto

It has these top-level messages:
	Relationship
	InstallRequest
	TrustModeRequest
	AppItem
	AppItemRequest
	MinStabilityRequest
	RelationshipRequest
	RelationshipData
	RelationshipsResponse
	RegistryActionResponse
	InitialiseProjectRequest
*/
package registry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_REQUESTED    Status = 0
	Status_INITIALIZING Status = 1
	Status_WAIT_AUTH    Status = 2
	Status_WAIT_CONFIG  Status = 3
	Status_INSTALLING   Status = 4
	Status_ACTIVE       Status = 5
	Status_DISABLED     Status = 6
)

var Status_name = map[int32]string{
	0: "REQUESTED",
	1: "INITIALIZING",
	2: "WAIT_AUTH",
	3: "WAIT_CONFIG",
	4: "INSTALLING",
	5: "ACTIVE",
	6: "DISABLED",
}
var Status_value = map[string]int32{
	"REQUESTED":    0,
	"INITIALIZING": 1,
	"WAIT_AUTH":    2,
	"WAIT_CONFIG":  3,
	"INSTALLING":   4,
	"ACTIVE":       5,
	"DISABLED":     6,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Visibility int32

const (
	Visibility_HIDE      Visibility = 0
	Visibility_SHOW      Visibility = 1
	Visibility_AVAILABLE Visibility = 2
)

var Visibility_name = map[int32]string{
	0: "HIDE",
	1: "SHOW",
	2: "AVAILABLE",
}
var Visibility_value = map[string]int32{
	"HIDE":      0,
	"SHOW":      1,
	"AVAILABLE": 2,
}

func (x Visibility) String() string {
	return proto.EnumName(Visibility_name, int32(x))
}
func (Visibility) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type TrustMode int32

const (
	TrustMode_NONE TrustMode = 0
	TrustMode_FULL TrustMode = 1
)

var TrustMode_name = map[int32]string{
	0: "NONE",
	1: "FULL",
}
var TrustMode_value = map[string]int32{
	"NONE": 0,
	"FULL": 1,
}

func (x TrustMode) String() string {
	return proto.EnumName(TrustMode_name, int32(x))
}
func (TrustMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Stability int32

const (
	Stability_STABLE Stability = 0
	Stability_BETA   Stability = 1
	Stability_ALPHA  Stability = 2
)

var Stability_name = map[int32]string{
	0: "STABLE",
	1: "BETA",
	2: "ALPHA",
}
var Stability_value = map[string]int32{
	"STABLE": 0,
	"BETA":   1,
	"ALPHA":  2,
}

func (x Stability) String() string {
	return proto.EnumName(Stability_name, int32(x))
}
func (Stability) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Relationship struct {
	ProjectId   string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GlobalAppId string `protobuf:"bytes,3,opt,name=global_app_id,json=globalAppId" json:"global_app_id,omitempty"`
}

func (m *Relationship) Reset()                    { *m = Relationship{} }
func (m *Relationship) String() string            { return proto.CompactTextString(m) }
func (*Relationship) ProtoMessage()               {}
func (*Relationship) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Relationship) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Relationship) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Relationship) GetGlobalAppId() string {
	if m != nil {
		return m.GlobalAppId
	}
	return ""
}

type InstallRequest struct {
	Relationship     *Relationship     `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
	TrustMode        TrustMode         `protobuf:"varint,2,opt,name=trust_mode,json=trustMode,enum=registry.TrustMode" json:"trust_mode,omitempty"`
	MinimumStability Stability         `protobuf:"varint,4,opt,name=minimum_stability,json=minimumStability,enum=registry.Stability" json:"minimum_stability,omitempty"`
	Meta             map[string]string `protobuf:"bytes,5,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *InstallRequest) Reset()                    { *m = InstallRequest{} }
func (m *InstallRequest) String() string            { return proto.CompactTextString(m) }
func (*InstallRequest) ProtoMessage()               {}
func (*InstallRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InstallRequest) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (m *InstallRequest) GetTrustMode() TrustMode {
	if m != nil {
		return m.TrustMode
	}
	return TrustMode_NONE
}

func (m *InstallRequest) GetMinimumStability() Stability {
	if m != nil {
		return m.MinimumStability
	}
	return Stability_STABLE
}

func (m *InstallRequest) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

type TrustModeRequest struct {
	Relationship *Relationship `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
	TrustMode    TrustMode     `protobuf:"varint,2,opt,name=trust_mode,json=trustMode,enum=registry.TrustMode" json:"trust_mode,omitempty"`
}

func (m *TrustModeRequest) Reset()                    { *m = TrustModeRequest{} }
func (m *TrustModeRequest) String() string            { return proto.CompactTextString(m) }
func (*TrustModeRequest) ProtoMessage()               {}
func (*TrustModeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TrustModeRequest) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (m *TrustModeRequest) GetTrustMode() TrustMode {
	if m != nil {
		return m.TrustMode
	}
	return TrustMode_NONE
}

type AppItem struct {
	Id         string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Visibility Visibility `protobuf:"varint,2,opt,name=visibility,enum=registry.Visibility" json:"visibility,omitempty"`
}

func (m *AppItem) Reset()                    { *m = AppItem{} }
func (m *AppItem) String() string            { return proto.CompactTextString(m) }
func (*AppItem) ProtoMessage()               {}
func (*AppItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AppItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AppItem) GetVisibility() Visibility {
	if m != nil {
		return m.Visibility
	}
	return Visibility_HIDE
}

type AppItemRequest struct {
	Relationship *Relationship `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
	Items        []*AppItem    `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *AppItemRequest) Reset()                    { *m = AppItemRequest{} }
func (m *AppItemRequest) String() string            { return proto.CompactTextString(m) }
func (*AppItemRequest) ProtoMessage()               {}
func (*AppItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AppItemRequest) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (m *AppItemRequest) GetItems() []*AppItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type MinStabilityRequest struct {
	Relationship     *Relationship `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
	MinimumStability Stability     `protobuf:"varint,2,opt,name=minimum_stability,json=minimumStability,enum=registry.Stability" json:"minimum_stability,omitempty"`
}

func (m *MinStabilityRequest) Reset()                    { *m = MinStabilityRequest{} }
func (m *MinStabilityRequest) String() string            { return proto.CompactTextString(m) }
func (*MinStabilityRequest) ProtoMessage()               {}
func (*MinStabilityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MinStabilityRequest) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (m *MinStabilityRequest) GetMinimumStability() Stability {
	if m != nil {
		return m.MinimumStability
	}
	return Stability_STABLE
}

type RelationshipRequest struct {
	Relationship *Relationship `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
	WithData     bool          `protobuf:"varint,2,opt,name=with_data,json=withData" json:"with_data,omitempty"`
}

func (m *RelationshipRequest) Reset()                    { *m = RelationshipRequest{} }
func (m *RelationshipRequest) String() string            { return proto.CompactTextString(m) }
func (*RelationshipRequest) ProtoMessage()               {}
func (*RelationshipRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RelationshipRequest) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (m *RelationshipRequest) GetWithData() bool {
	if m != nil {
		return m.WithData
	}
	return false
}

type RelationshipData struct {
	Relationship       *Relationship `protobuf:"bytes,1,opt,name=relationship" json:"relationship,omitempty"`
	TrustMode          TrustMode     `protobuf:"varint,2,opt,name=trust_mode,json=trustMode,enum=registry.TrustMode" json:"trust_mode,omitempty"`
	Navigation         []*AppItem    `protobuf:"bytes,5,rep,name=navigation" json:"navigation,omitempty"`
	QuickActions       []*AppItem    `protobuf:"bytes,6,rep,name=quick_actions,json=quickActions" json:"quick_actions,omitempty"`
	SearchActions      []*AppItem    `protobuf:"bytes,7,rep,name=search_actions,json=searchActions" json:"search_actions,omitempty"`
	Queues             []*AppItem    `protobuf:"bytes,8,rep,name=queues" json:"queues,omitempty"`
	Notifications      []*AppItem    `protobuf:"bytes,9,rep,name=notifications" json:"notifications,omitempty"`
	PanelIntegrations  []*AppItem    `protobuf:"bytes,10,rep,name=panel_integrations,json=panelIntegrations" json:"panel_integrations,omitempty"`
	MenuIntegrations   []*AppItem    `protobuf:"bytes,11,rep,name=menu_integrations,json=menuIntegrations" json:"menu_integrations,omitempty"`
	ActionIntegrations []*AppItem    `protobuf:"bytes,12,rep,name=action_integrations,json=actionIntegrations" json:"action_integrations,omitempty"`
	Actions            []*AppItem    `protobuf:"bytes,13,rep,name=actions" json:"actions,omitempty"`
	Events             []*AppItem    `protobuf:"bytes,14,rep,name=events" json:"events,omitempty"`
	Lookups            []*AppItem    `protobuf:"bytes,15,rep,name=lookups" json:"lookups,omitempty"`
	Status             Status        `protobuf:"varint,16,opt,name=status,enum=registry.Status" json:"status,omitempty"`
	MinimumStability   Stability     `protobuf:"varint,17,opt,name=minimum_stability,json=minimumStability,enum=registry.Stability" json:"minimum_stability,omitempty"`
}

func (m *RelationshipData) Reset()                    { *m = RelationshipData{} }
func (m *RelationshipData) String() string            { return proto.CompactTextString(m) }
func (*RelationshipData) ProtoMessage()               {}
func (*RelationshipData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RelationshipData) GetRelationship() *Relationship {
	if m != nil {
		return m.Relationship
	}
	return nil
}

func (m *RelationshipData) GetTrustMode() TrustMode {
	if m != nil {
		return m.TrustMode
	}
	return TrustMode_NONE
}

func (m *RelationshipData) GetNavigation() []*AppItem {
	if m != nil {
		return m.Navigation
	}
	return nil
}

func (m *RelationshipData) GetQuickActions() []*AppItem {
	if m != nil {
		return m.QuickActions
	}
	return nil
}

func (m *RelationshipData) GetSearchActions() []*AppItem {
	if m != nil {
		return m.SearchActions
	}
	return nil
}

func (m *RelationshipData) GetQueues() []*AppItem {
	if m != nil {
		return m.Queues
	}
	return nil
}

func (m *RelationshipData) GetNotifications() []*AppItem {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *RelationshipData) GetPanelIntegrations() []*AppItem {
	if m != nil {
		return m.PanelIntegrations
	}
	return nil
}

func (m *RelationshipData) GetMenuIntegrations() []*AppItem {
	if m != nil {
		return m.MenuIntegrations
	}
	return nil
}

func (m *RelationshipData) GetActionIntegrations() []*AppItem {
	if m != nil {
		return m.ActionIntegrations
	}
	return nil
}

func (m *RelationshipData) GetActions() []*AppItem {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *RelationshipData) GetEvents() []*AppItem {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *RelationshipData) GetLookups() []*AppItem {
	if m != nil {
		return m.Lookups
	}
	return nil
}

func (m *RelationshipData) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_REQUESTED
}

func (m *RelationshipData) GetMinimumStability() Stability {
	if m != nil {
		return m.MinimumStability
	}
	return Stability_STABLE
}

type RelationshipsResponse struct {
	Relationships []*RelationshipData `protobuf:"bytes,1,rep,name=relationships" json:"relationships,omitempty"`
}

func (m *RelationshipsResponse) Reset()                    { *m = RelationshipsResponse{} }
func (m *RelationshipsResponse) String() string            { return proto.CompactTextString(m) }
func (*RelationshipsResponse) ProtoMessage()               {}
func (*RelationshipsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RelationshipsResponse) GetRelationships() []*RelationshipData {
	if m != nil {
		return m.Relationships
	}
	return nil
}

type RegistryActionResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *RegistryActionResponse) Reset()                    { *m = RegistryActionResponse{} }
func (m *RegistryActionResponse) String() string            { return proto.CompactTextString(m) }
func (*RegistryActionResponse) ProtoMessage()               {}
func (*RegistryActionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RegistryActionResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RegistryActionResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type InitialiseProjectRequest struct {
	ProjectId string            `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	OwnerId   string            `protobuf:"bytes,2,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	Meta      map[string]string `protobuf:"bytes,3,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *InitialiseProjectRequest) Reset()                    { *m = InitialiseProjectRequest{} }
func (m *InitialiseProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*InitialiseProjectRequest) ProtoMessage()               {}
func (*InitialiseProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *InitialiseProjectRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *InitialiseProjectRequest) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *InitialiseProjectRequest) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*Relationship)(nil), "registry.Relationship")
	proto.RegisterType((*InstallRequest)(nil), "registry.InstallRequest")
	proto.RegisterType((*TrustModeRequest)(nil), "registry.TrustModeRequest")
	proto.RegisterType((*AppItem)(nil), "registry.AppItem")
	proto.RegisterType((*AppItemRequest)(nil), "registry.AppItemRequest")
	proto.RegisterType((*MinStabilityRequest)(nil), "registry.MinStabilityRequest")
	proto.RegisterType((*RelationshipRequest)(nil), "registry.RelationshipRequest")
	proto.RegisterType((*RelationshipData)(nil), "registry.RelationshipData")
	proto.RegisterType((*RelationshipsResponse)(nil), "registry.RelationshipsResponse")
	proto.RegisterType((*RegistryActionResponse)(nil), "registry.RegistryActionResponse")
	proto.RegisterType((*InitialiseProjectRequest)(nil), "registry.InitialiseProjectRequest")
	proto.RegisterEnum("registry.Status", Status_name, Status_value)
	proto.RegisterEnum("registry.Visibility", Visibility_name, Visibility_value)
	proto.RegisterEnum("registry.TrustMode", TrustMode_name, TrustMode_value)
	proto.RegisterEnum("registry.Stability", Stability_name, Stability_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registry service

type RegistryClient interface {
	InitialiseProject(ctx context.Context, in *InitialiseProjectRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	Uninstall(ctx context.Context, in *Relationship, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	Activate(ctx context.Context, in *Relationship, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	Deactivate(ctx context.Context, in *Relationship, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	SetTrustMode(ctx context.Context, in *TrustModeRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	SetNavigation(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	SetQuickActions(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	SetSearchActions(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	SetActions(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	SetEvents(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	SetLookups(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	SetQueues(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	SetNotifications(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	SetPanelIntegrations(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	SetMenuIntegrations(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	SetActionIntegrations(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	SetMinimumStability(ctx context.Context, in *MinStabilityRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error)
	GetRelationships(ctx context.Context, in *RelationshipRequest, opts ...grpc.CallOption) (*RelationshipsResponse, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) InitialiseProject(ctx context.Context, in *InitialiseProjectRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/InitialiseProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/Install", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Uninstall(ctx context.Context, in *Relationship, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/Uninstall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Activate(ctx context.Context, in *Relationship, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/Activate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Deactivate(ctx context.Context, in *Relationship, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/Deactivate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetTrustMode(ctx context.Context, in *TrustModeRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetTrustMode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetNavigation(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetNavigation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetQuickActions(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetQuickActions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetSearchActions(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetSearchActions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetActions(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetActions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetEvents(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetLookups(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetLookups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetQueues(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetQueues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetNotifications(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetNotifications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetPanelIntegrations(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetPanelIntegrations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetMenuIntegrations(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetMenuIntegrations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetActionIntegrations(ctx context.Context, in *AppItemRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetActionIntegrations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) SetMinimumStability(ctx context.Context, in *MinStabilityRequest, opts ...grpc.CallOption) (*RegistryActionResponse, error) {
	out := new(RegistryActionResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/SetMinimumStability", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetRelationships(ctx context.Context, in *RelationshipRequest, opts ...grpc.CallOption) (*RelationshipsResponse, error) {
	out := new(RelationshipsResponse)
	err := grpc.Invoke(ctx, "/registry.Registry/GetRelationships", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registry service

type RegistryServer interface {
	InitialiseProject(context.Context, *InitialiseProjectRequest) (*RegistryActionResponse, error)
	Install(context.Context, *InstallRequest) (*RegistryActionResponse, error)
	Uninstall(context.Context, *Relationship) (*RegistryActionResponse, error)
	Activate(context.Context, *Relationship) (*RegistryActionResponse, error)
	Deactivate(context.Context, *Relationship) (*RegistryActionResponse, error)
	SetTrustMode(context.Context, *TrustModeRequest) (*RegistryActionResponse, error)
	SetNavigation(context.Context, *AppItemRequest) (*RegistryActionResponse, error)
	SetQuickActions(context.Context, *AppItemRequest) (*RegistryActionResponse, error)
	SetSearchActions(context.Context, *AppItemRequest) (*RegistryActionResponse, error)
	SetActions(context.Context, *AppItemRequest) (*RegistryActionResponse, error)
	SetEvents(context.Context, *AppItemRequest) (*RegistryActionResponse, error)
	SetLookups(context.Context, *AppItemRequest) (*RegistryActionResponse, error)
	SetQueues(context.Context, *AppItemRequest) (*RegistryActionResponse, error)
	SetNotifications(context.Context, *AppItemRequest) (*RegistryActionResponse, error)
	SetPanelIntegrations(context.Context, *AppItemRequest) (*RegistryActionResponse, error)
	SetMenuIntegrations(context.Context, *AppItemRequest) (*RegistryActionResponse, error)
	SetActionIntegrations(context.Context, *AppItemRequest) (*RegistryActionResponse, error)
	SetMinimumStability(context.Context, *MinStabilityRequest) (*RegistryActionResponse, error)
	GetRelationships(context.Context, *RelationshipRequest) (*RelationshipsResponse, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_InitialiseProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitialiseProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).InitialiseProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/InitialiseProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).InitialiseProject(ctx, req.(*InitialiseProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/Install",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Install(ctx, req.(*InstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Uninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Relationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Uninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/Uninstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Uninstall(ctx, req.(*Relationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Relationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Activate(ctx, req.(*Relationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Relationship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/Deactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Deactivate(ctx, req.(*Relationship))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetTrustMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrustModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetTrustMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetTrustMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetTrustMode(ctx, req.(*TrustModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetNavigation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetNavigation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetNavigation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetNavigation(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetQuickActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetQuickActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetQuickActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetQuickActions(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetSearchActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetSearchActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetSearchActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetSearchActions(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetActions(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetEvents(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetLookups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetLookups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetLookups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetLookups(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetQueues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetQueues(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetNotifications(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetPanelIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetPanelIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetPanelIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetPanelIntegrations(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetMenuIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetMenuIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetMenuIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetMenuIntegrations(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetActionIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetActionIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetActionIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetActionIntegrations(ctx, req.(*AppItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_SetMinimumStability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinStabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).SetMinimumStability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/SetMinimumStability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).SetMinimumStability(ctx, req.(*MinStabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetRelationships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetRelationships(ctx, req.(*RelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitialiseProject",
			Handler:    _Registry_InitialiseProject_Handler,
		},
		{
			MethodName: "Install",
			Handler:    _Registry_Install_Handler,
		},
		{
			MethodName: "Uninstall",
			Handler:    _Registry_Uninstall_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _Registry_Activate_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _Registry_Deactivate_Handler,
		},
		{
			MethodName: "SetTrustMode",
			Handler:    _Registry_SetTrustMode_Handler,
		},
		{
			MethodName: "SetNavigation",
			Handler:    _Registry_SetNavigation_Handler,
		},
		{
			MethodName: "SetQuickActions",
			Handler:    _Registry_SetQuickActions_Handler,
		},
		{
			MethodName: "SetSearchActions",
			Handler:    _Registry_SetSearchActions_Handler,
		},
		{
			MethodName: "SetActions",
			Handler:    _Registry_SetActions_Handler,
		},
		{
			MethodName: "SetEvents",
			Handler:    _Registry_SetEvents_Handler,
		},
		{
			MethodName: "SetLookups",
			Handler:    _Registry_SetLookups_Handler,
		},
		{
			MethodName: "SetQueues",
			Handler:    _Registry_SetQueues_Handler,
		},
		{
			MethodName: "SetNotifications",
			Handler:    _Registry_SetNotifications_Handler,
		},
		{
			MethodName: "SetPanelIntegrations",
			Handler:    _Registry_SetPanelIntegrations_Handler,
		},
		{
			MethodName: "SetMenuIntegrations",
			Handler:    _Registry_SetMenuIntegrations_Handler,
		},
		{
			MethodName: "SetActionIntegrations",
			Handler:    _Registry_SetActionIntegrations_Handler,
		},
		{
			MethodName: "SetMinimumStability",
			Handler:    _Registry_SetMinimumStability_Handler,
		},
		{
			MethodName: "GetRelationships",
			Handler:    _Registry_GetRelationships_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xdd, 0x52, 0xdb, 0x46,
	0x14, 0x8e, 0x0d, 0xd8, 0xd6, 0xf1, 0x0f, 0xeb, 0x85, 0xa4, 0x2a, 0x9d, 0x4c, 0x18, 0x4d, 0x67,
	0x4a, 0x69, 0x0a, 0x53, 0xda, 0x49, 0x32, 0xb9, 0xe8, 0x20, 0x62, 0x03, 0x9a, 0x0a, 0x03, 0x92,
	0x21, 0x93, 0xdc, 0x78, 0x16, 0x7b, 0x6b, 0x36, 0xd8, 0x92, 0xf1, 0xae, 0x48, 0xb9, 0xed, 0x2b,
	0xf4, 0x51, 0xfa, 0x06, 0x7d, 0x81, 0x5e, 0xf7, 0x6d, 0x3a, 0x5a, 0x49, 0x96, 0x04, 0xd6, 0x84,
	0x8c, 0x3d, 0xed, 0x9d, 0x76, 0xcf, 0xf7, 0x7d, 0x7b, 0x74, 0xf6, 0x1c, 0x9d, 0x23, 0xa8, 0x8d,
	0x69, 0x9f, 0x71, 0x31, 0xbe, 0xdd, 0x1a, 0x8d, 0x5d, 0xe1, 0xe2, 0x52, 0xb4, 0xd6, 0x3e, 0x40,
	0xc5, 0xa2, 0x03, 0x22, 0x98, 0xeb, 0xf0, 0x4b, 0x36, 0xc2, 0x4f, 0x01, 0x46, 0x63, 0xf7, 0x03,
	0xed, 0x8a, 0x0e, 0xeb, 0xa9, 0xb9, 0xf5, 0xdc, 0x86, 0x62, 0x29, 0xe1, 0x8e, 0xd1, 0xc3, 0x5f,
	0x40, 0xd1, 0xe3, 0x74, 0xec, 0xdb, 0xf2, 0xd2, 0x56, 0xf0, 0x97, 0x46, 0x0f, 0x6b, 0x50, 0xed,
	0x0f, 0xdc, 0x0b, 0x32, 0xe8, 0x90, 0xd1, 0xc8, 0x37, 0x2f, 0x48, 0x73, 0x39, 0xd8, 0xd4, 0x47,
	0x23, 0xa3, 0xa7, 0xfd, 0x99, 0x87, 0x9a, 0xe1, 0x70, 0x41, 0x06, 0x03, 0x8b, 0x5e, 0x7b, 0x94,
	0x0b, 0xfc, 0x1a, 0x2a, 0xe3, 0xc4, 0xf1, 0xf2, 0xc0, 0xf2, 0xce, 0x93, 0xad, 0x89, 0xbf, 0x49,
	0xe7, 0xac, 0x14, 0x16, 0xef, 0x00, 0x88, 0xb1, 0xc7, 0x45, 0x67, 0xe8, 0xf6, 0xa8, 0x74, 0xa7,
	0xb6, 0xb3, 0x12, 0x33, 0xdb, 0xbe, 0xed, 0xc8, 0xed, 0x51, 0x4b, 0x11, 0xd1, 0x23, 0xde, 0x85,
	0xfa, 0x90, 0x39, 0x6c, 0xe8, 0x0d, 0x3b, 0x5c, 0x90, 0x0b, 0x36, 0x60, 0xe2, 0x56, 0x5d, 0xbc,
	0x4b, 0xb5, 0x23, 0x93, 0x85, 0x42, 0xf4, 0x64, 0x07, 0xbf, 0x80, 0xc5, 0x21, 0x15, 0x44, 0x5d,
	0x5a, 0x5f, 0xd8, 0x28, 0xef, 0x68, 0x31, 0x29, 0xfd, 0x66, 0x5b, 0x47, 0x54, 0x90, 0xa6, 0x23,
	0xc6, 0xb7, 0x96, 0xc4, 0xaf, 0xbd, 0x04, 0x65, 0xb2, 0x85, 0x11, 0x2c, 0x5c, 0xd1, 0xdb, 0x30,
	0xbc, 0xfe, 0x23, 0x5e, 0x85, 0xa5, 0x1b, 0x32, 0xf0, 0x68, 0x18, 0xd6, 0x60, 0xf1, 0x3a, 0xff,
	0x2a, 0xa7, 0xfd, 0x9e, 0x03, 0x14, 0xbf, 0xcb, 0xff, 0x13, 0x37, 0xed, 0x18, 0x8a, 0xfe, 0x1d,
	0x0a, 0x3a, 0xc4, 0x35, 0xc8, 0x4f, 0x32, 0x23, 0xcf, 0x7a, 0xf8, 0x27, 0x80, 0x1b, 0xc6, 0x59,
	0x18, 0xcb, 0x40, 0x6e, 0x35, 0x96, 0x3b, 0x9f, 0xd8, 0xac, 0x04, 0x4e, 0xf3, 0xa0, 0x16, 0x0a,
	0xce, 0xe3, 0x95, 0xbe, 0x81, 0x25, 0x26, 0xe8, 0x90, 0xab, 0x79, 0x79, 0x2b, 0xf5, 0x98, 0x14,
	0x1d, 0x12, 0xd8, 0xb5, 0x3f, 0x72, 0xb0, 0x72, 0xc4, 0x9c, 0xf8, 0x82, 0xe7, 0x70, 0xf8, 0xd4,
	0x9c, 0xca, 0x7f, 0x46, 0x4e, 0x69, 0x0e, 0xac, 0xa4, 0xf4, 0xe7, 0xe0, 0xd4, 0x57, 0xa0, 0x7c,
	0x64, 0xe2, 0xb2, 0xd3, 0x23, 0x82, 0x48, 0x67, 0x4a, 0x56, 0xc9, 0xdf, 0x68, 0x10, 0x41, 0xb4,
	0xbf, 0x0a, 0x80, 0x92, 0x5c, 0x7f, 0xf3, 0x3f, 0x2f, 0xc5, 0x1f, 0x00, 0x1c, 0x72, 0xc3, 0xfa,
	0x52, 0x25, 0x2c, 0xa7, 0x29, 0x17, 0x97, 0x00, 0xe1, 0x17, 0x50, 0xbd, 0xf6, 0x58, 0xf7, 0xaa,
	0x43, 0xba, 0xf2, 0x68, 0xb5, 0x90, 0xc5, 0xaa, 0x48, 0x9c, 0x1e, 0xc0, 0xf0, 0x2b, 0xa8, 0x71,
	0x4a, 0xc6, 0xdd, 0xcb, 0x09, 0xb1, 0x98, 0x45, 0xac, 0x06, 0xc0, 0x88, 0xf9, 0x2d, 0x14, 0xae,
	0x3d, 0xea, 0x51, 0xae, 0x96, 0xb2, 0x18, 0x21, 0x00, 0xbf, 0x84, 0xaa, 0xe3, 0x0a, 0xf6, 0x2b,
	0xeb, 0x06, 0x71, 0x51, 0x95, 0xcc, 0x33, 0x52, 0x38, 0xbc, 0x0b, 0x78, 0x44, 0x1c, 0x3a, 0xe8,
	0x30, 0x47, 0xd0, 0xfe, 0x38, 0x64, 0x43, 0x16, 0xbb, 0x2e, 0xc1, 0x46, 0x02, 0x8b, 0x7f, 0x86,
	0xfa, 0x90, 0x3a, 0x5e, 0x5a, 0xa0, 0x9c, 0x25, 0x80, 0x7c, 0x6c, 0x8a, 0xbf, 0x07, 0x2b, 0x41,
	0x60, 0xd2, 0x0a, 0x95, 0x2c, 0x05, 0x1c, 0xa0, 0x53, 0x1a, 0xdf, 0x41, 0x31, 0x0a, 0x6e, 0x35,
	0x8b, 0x17, 0x21, 0xfc, 0xb0, 0xd2, 0x1b, 0xea, 0x08, 0xae, 0xd6, 0x32, 0xc3, 0x1a, 0x00, 0x7c,
	0xdd, 0x81, 0xeb, 0x5e, 0x79, 0x23, 0xae, 0x2e, 0x67, 0xea, 0x86, 0x08, 0xbc, 0x01, 0x05, 0x2e,
	0x88, 0xf0, 0xb8, 0x8a, 0x64, 0x0e, 0xa2, 0x54, 0xfd, 0x09, 0x8f, 0x5b, 0xa1, 0x7d, 0x7a, 0xd1,
	0xd6, 0x3f, 0xa7, 0x68, 0xdf, 0xc1, 0xe3, 0x64, 0x45, 0x70, 0x8b, 0xf2, 0x91, 0xeb, 0x70, 0xbf,
	0xc7, 0x54, 0x93, 0xc5, 0xc1, 0xd5, 0x9c, 0xf4, 0x7b, 0x6d, 0x7a, 0x25, 0xf9, 0xb5, 0x67, 0xa5,
	0x09, 0x9a, 0x09, 0x4f, 0xac, 0x10, 0x1b, 0x24, 0xe2, 0x44, 0x5b, 0x85, 0x22, 0xf7, 0xba, 0x5d,
	0xca, 0xb9, 0xac, 0xcf, 0x92, 0x15, 0x2d, 0x7d, 0xcb, 0x90, 0x72, 0x4e, 0xfa, 0x51, 0x0b, 0x89,
	0x96, 0xda, 0xdf, 0x39, 0x50, 0x0d, 0x87, 0x09, 0x46, 0x06, 0x8c, 0xd3, 0x93, 0xa0, 0x97, 0x47,
	0xdf, 0x98, 0x4f, 0xf4, 0xfb, 0x2f, 0xa1, 0xe4, 0x7e, 0x74, 0x92, 0x0d, 0xbf, 0x28, 0xd7, 0x46,
	0x0f, 0xef, 0x86, 0x8d, 0x70, 0x41, 0xbe, 0xdd, 0xf3, 0x64, 0x23, 0x9c, 0x7e, 0xd6, 0xdc, 0x5a,
	0xe2, 0x26, 0x87, 0x42, 0x70, 0x9d, 0xb8, 0x0a, 0x8a, 0xd5, 0x3c, 0x3d, 0x6b, 0xda, 0xed, 0x66,
	0x03, 0x3d, 0xc2, 0x08, 0x2a, 0x46, 0xcb, 0x68, 0x1b, 0xba, 0x69, 0xbc, 0x37, 0x5a, 0x07, 0x28,
	0xe7, 0x03, 0xde, 0xea, 0x46, 0xbb, 0xa3, 0x9f, 0xb5, 0x0f, 0x51, 0x1e, 0x2f, 0x43, 0x59, 0x2e,
	0xdf, 0x1c, 0xb7, 0xf6, 0x8d, 0x03, 0xb4, 0x80, 0x6b, 0x00, 0x46, 0xcb, 0x6e, 0xeb, 0xa6, 0xe9,
	0xe3, 0x17, 0x31, 0x40, 0x41, 0x7f, 0xd3, 0x36, 0xce, 0x9b, 0x68, 0x09, 0x57, 0xa0, 0xd4, 0x30,
	0x6c, 0x7d, 0xcf, 0x6c, 0x36, 0x50, 0x61, 0x73, 0x1b, 0x20, 0xee, 0x65, 0xb8, 0x04, 0x8b, 0x87,
	0x46, 0xa3, 0x89, 0x1e, 0xf9, 0x4f, 0xf6, 0xe1, 0xf1, 0xdb, 0xe0, 0x2c, 0xfd, 0x5c, 0x37, 0x4c,
	0x9f, 0x81, 0xf2, 0x9b, 0xcf, 0x40, 0x99, 0x7c, 0xf8, 0x7c, 0x54, 0xeb, 0xb8, 0x15, 0xe2, 0xf7,
	0xcf, 0x4c, 0x13, 0xe5, 0x36, 0x9f, 0x83, 0x12, 0xcf, 0x15, 0x00, 0x05, 0xbb, 0x2d, 0x99, 0x12,
	0xb2, 0xd7, 0x6c, 0xeb, 0x28, 0x87, 0x15, 0x58, 0xd2, 0xcd, 0x93, 0x43, 0x1d, 0xe5, 0x77, 0xfe,
	0x29, 0x43, 0x29, 0xca, 0x0a, 0xfc, 0x0e, 0xea, 0xf7, 0xc2, 0x8c, 0xb5, 0x4f, 0xdf, 0xc1, 0xda,
	0x7a, 0x32, 0x0b, 0xa7, 0xa6, 0x58, 0x13, 0x8a, 0xe1, 0x28, 0x83, 0xd5, 0xac, 0xe9, 0xe6, 0x41,
	0x32, 0xca, 0x99, 0xc3, 0x42, 0xa1, 0x8c, 0x2e, 0xf2, 0x00, 0x99, 0x06, 0x94, 0xfc, 0x9d, 0x1b,
	0x22, 0xe8, 0x0c, 0x2a, 0xfb, 0x00, 0x0d, 0x4a, 0x66, 0xd7, 0x31, 0xa1, 0x62, 0x53, 0x11, 0xdf,
	0xea, 0xda, 0xb4, 0x1e, 0xf7, 0xe0, 0x10, 0xfd, 0x02, 0x55, 0x9b, 0x8a, 0x56, 0xdc, 0xdf, 0xd4,
	0xfb, 0x9f, 0xb6, 0x07, 0x8b, 0x1d, 0xc1, 0xb2, 0x4d, 0xc5, 0x69, 0xb2, 0xed, 0xcd, 0x22, 0xd7,
	0x02, 0x64, 0x53, 0x61, 0xa7, 0x9a, 0xe1, 0x2c, 0x7a, 0x87, 0x00, 0x36, 0x15, 0xf3, 0x50, 0x3a,
	0x00, 0xc5, 0xa6, 0xa2, 0x19, 0x74, 0x87, 0xd9, 0x5d, 0x32, 0xc3, 0xd6, 0x31, 0xbb, 0x4b, 0xa7,
	0xc1, 0x1c, 0x30, 0x7b, 0xd4, 0x5b, 0xa9, 0xf1, 0x60, 0x16, 0x3d, 0x0b, 0x56, 0x6d, 0x2a, 0x4e,
	0xee, 0x0d, 0x0c, 0xb3, 0x68, 0x9e, 0xc2, 0x8a, 0x4d, 0xc5, 0xd1, 0xdd, 0x19, 0x62, 0x16, 0x49,
	0x1b, 0x1e, 0x4f, 0x92, 0x63, 0x6e, 0xa2, 0xe7, 0x81, 0x9f, 0x77, 0xff, 0xdf, 0x9e, 0xc6, 0xc4,
	0x29, 0x3f, 0x02, 0x0f, 0x8a, 0x29, 0x3a, 0xa0, 0x22, 0xd5, 0xfa, 0x93, 0xa2, 0x53, 0x06, 0xf9,
	0xb5, 0x67, 0xd3, 0xcd, 0x93, 0x91, 0x61, 0xef, 0xeb, 0xf7, 0x5a, 0x9f, 0x89, 0x4b, 0xef, 0x62,
	0xab, 0xeb, 0x0e, 0xb7, 0xaf, 0xbc, 0x0b, 0xfa, 0xdb, 0xb6, 0xfc, 0x53, 0xff, 0xbe, 0xef, 0x6e,
	0x47, 0xdc, 0x8b, 0x82, 0xdc, 0xfa, 0xf1, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x46, 0xa1, 0x5d,
	0xde, 0xce, 0x0f, 0x00, 0x00,
}
